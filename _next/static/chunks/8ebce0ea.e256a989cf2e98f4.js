"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1334],{65784:(t,e,r)=>{let i;r.r(e),r.d(e,{Errors:()=>er,STAGE:()=>z,TREE:()=>ed,WORKDIR:()=>eh,abortMerge:()=>eE,add:()=>eC,addNote:()=>eK,addRemote:()=>eY,annotatedTag:()=>eX,branch:()=>e0,checkout:()=>e4,clone:()=>rk,commit:()=>rS,currentBranch:()=>rR,default:()=>aa,deleteBranch:()=>rO,deleteRef:()=>rP,deleteRemote:()=>rC,deleteTag:()=>rN,expandOid:()=>rT,expandRef:()=>rH,fastForward:()=>rK,fetch:()=>rZ,findMergeBase:()=>rY,findRoot:()=>rX,getConfig:()=>rQ,getConfigAll:()=>r1,getRemoteInfo:()=>r2,getRemoteInfo2:()=>r4,hashBlob:()=>r6,indexPack:()=>r9,init:()=>r7,isDescendent:()=>ie,isIgnored:()=>ir,listBranches:()=>ii,listFiles:()=>io,listNotes:()=>ic,listRemotes:()=>iu,listServerRefs:()=>im,listTags:()=>ip,log:()=>i$,merge:()=>iv,packObjects:()=>iE,pull:()=>ik,push:()=>iA,readBlob:()=>iN,readCommit:()=>iB,readNote:()=>iM,readObject:()=>iT,readTag:()=>iz,readTree:()=>iW,remove:()=>iF,removeNote:()=>iq,renameBranch:()=>iV,resetIndex:()=>iZ,resolveRef:()=>iY,setConfig:()=>iJ,status:()=>iX,statusMatrix:()=>i1,tag:()=>i2,updateIndex:()=>i8,version:()=>i4,walk:()=>i3,writeBlob:()=>i6,writeCommit:()=>i9,writeObject:()=>i7,writeRef:()=>at,writeTag:()=>ar,writeTree:()=>ai});var a=r(18465),n=r(63737),s=r(57975),o=r(52566),l=r(51668),c=r(96867),f=r(82535),d=r(86219),u=r(36895),h=r(48287).Buffer,w=r(65606);class m extends Error{constructor(t){super(t),this.caller=""}toJSON(){return{code:this.code,data:this.data,caller:this.caller,message:this.message,stack:this.stack}}fromJSON(t){let e=new m(t.message);return e.code=t.code,e.data=t.data,e.caller=t.caller,e.stack=t.stack,e}get isIsomorphicGitError(){return!0}}class p extends m{constructor(t){super(`Modifying the index is not possible because you have unmerged files: ${t.toString}. Fix them up in the work tree, and then use 'git add/rm as appropriate to mark resolution and make a commit.`),this.code=this.name=p.code,this.data={filepaths:t}}}p.code="UnmergedPathsError";class g extends m{constructor(t){super(`An internal error caused this command to fail. Please file a bug report at https://github.com/isomorphic-git/isomorphic-git/issues with this error message: ${t}`),this.code=this.name=g.code,this.data={message:t}}}g.code="InternalError";class y extends m{constructor(t){super(`The filepath "${t}" contains unsafe character sequences`),this.code=this.name=y.code,this.data={filepath:t}}}y.code="UnsafeFilepathError";class b{constructor(t){this.buffer=t,this._start=0}eof(){return this._start>=this.buffer.length}tell(){return this._start}seek(t){this._start=t}slice(t){let e=this.buffer.slice(this._start,this._start+t);return this._start+=t,e}toString(t,e){let r=this.buffer.toString(t,this._start,this._start+e);return this._start+=e,r}write(t,e,r){let i=this.buffer.write(t,this._start,e,r);return this._start+=e,i}copy(t,e,r){let i=t.copy(this.buffer,this._start,e,r);return this._start+=i,i}readUInt8(){let t=this.buffer.readUInt8(this._start);return this._start+=1,t}writeUInt8(t){let e=this.buffer.writeUInt8(t,this._start);return this._start+=1,e}readUInt16BE(){let t=this.buffer.readUInt16BE(this._start);return this._start+=2,t}writeUInt16BE(t){let e=this.buffer.writeUInt16BE(t,this._start);return this._start+=2,e}readUInt32BE(){let t=this.buffer.readUInt32BE(this._start);return this._start+=4,t}writeUInt32BE(t){let e=this.buffer.writeUInt32BE(t,this._start);return this._start+=4,e}}function $(t,e){return-(t<e)||+(t>e)}function v(t,e){return $(t.path,e.path)}function x(t){let e=t>0?t>>12:0;4!==e&&8!==e&&10!==e&&14!==e&&(e=8);let r=511&t;return r=73&r?493:420,8!==e&&(r=0),(e<<12)+r}function _(t,e,r,i){if(void 0!==t&&void 0!==e)return[t,e];void 0===r&&(r=i.valueOf());let a=Math.floor(r/1e3),n=(r-1e3*a)*1e6;return[a,n]}function j(t){let[e,r]=_(t.ctimeSeconds,t.ctimeNanoseconds,t.ctimeMs,t.ctime),[i,a]=_(t.mtimeSeconds,t.mtimeNanoseconds,t.mtimeMs,t.mtime);return{ctimeSeconds:e%0x100000000,ctimeNanoseconds:r%0x100000000,mtimeSeconds:i%0x100000000,mtimeNanoseconds:a%0x100000000,dev:t.dev%0x100000000,ino:t.ino%0x100000000,mode:x(t.mode%0x100000000),uid:t.uid%0x100000000,gid:t.gid%0x100000000,size:t.size>-1?t.size%0x100000000:0}}let E=null;async function k(t){return null===E&&(E=await R()),E?S(t):new n().update(t).digest("hex")}async function S(t){return function(t){let e="";for(let r of new Uint8Array(t))r<16&&(e+="0"),e+=r.toString(16);return e}(await crypto.subtle.digest("SHA-1",t))}async function R(){try{let t=await S(new Uint8Array([]));if("da39a3ee5e6b4b0d3255bfef95601890afd80709"===t)return!0}catch(t){}return!1}class I{constructor(t,e){this._dirty=!1,this._unmergedPaths=e||new Set,this._entries=t||new Map}_addEntry(t){if(0===t.flags.stage)t.stages=[t],this._entries.set(t.path,t),this._unmergedPaths.delete(t.path);else{let e=this._entries.get(t.path);e||(this._entries.set(t.path,t),e=t),e.stages[t.flags.stage]=t,this._unmergedPaths.add(t.path)}}static async from(t){if(h.isBuffer(t))return I.fromBuffer(t);if(null===t)return new I(null);throw new g("invalid type passed to GitIndex.from")}static async fromBuffer(t){if(0===t.length)throw new g("Index file is empty (.git/index)");let e=new I,r=new b(t),i=r.toString("utf8",4);if("DIRC"!==i)throw new g(`Invalid dircache magic file number: ${i}`);let a=await k(t.slice(0,-20)),n=t.slice(-20).toString("hex");if(n!==a)throw new g(`Invalid checksum in GitIndex buffer: expected ${n} but saw ${a}`);let s=r.readUInt32BE();if(2!==s)throw new g(`Unsupported dircache version: ${s}`);let o=r.readUInt32BE(),l=0;for(;!r.eof()&&l<o;){let i={};i.ctimeSeconds=r.readUInt32BE(),i.ctimeNanoseconds=r.readUInt32BE(),i.mtimeSeconds=r.readUInt32BE(),i.mtimeNanoseconds=r.readUInt32BE(),i.dev=r.readUInt32BE(),i.ino=r.readUInt32BE(),i.mode=r.readUInt32BE(),i.uid=r.readUInt32BE(),i.gid=r.readUInt32BE(),i.size=r.readUInt32BE(),i.oid=r.slice(20).toString("hex");let a=r.readUInt16BE();i.flags={assumeValid:!!(32768&a),extended:!!(16384&a),stage:(12288&a)>>12,nameLength:4095&a};let n=t.indexOf(0,r.tell()+1)-r.tell();if(n<1)throw new g(`Got a path length of: ${n}`);if(i.path=r.toString("utf8",n),i.path.includes("..\\")||i.path.includes("../"))throw new y(i.path);let s=8-(r.tell()-12)%8;for(0===s&&(s=8);s--;){let t=r.readUInt8();if(0!==t)throw new g(`Expected 1-8 null characters but got '${t}' after ${i.path}`);if(r.eof())throw new g("Unexpected end of file")}i.stages=[],e._addEntry(i),l++}return e}get unmergedPaths(){return[...this._unmergedPaths]}get entries(){return[...this._entries.values()].sort(v)}get entriesMap(){return this._entries}get entriesFlat(){return[...this.entries].flatMap(t=>t.stages.length>1?t.stages.filter(t=>t):t)}*[Symbol.iterator](){for(let t of this.entries)yield t}insert({filepath:t,stats:e,oid:r,stage:i=0}){e||(e={ctimeSeconds:0,ctimeNanoseconds:0,mtimeSeconds:0,mtimeNanoseconds:0,dev:0,ino:0,mode:0,uid:0,gid:0,size:0}),e=j(e);let a=h.from(t),n={ctimeSeconds:e.ctimeSeconds,ctimeNanoseconds:e.ctimeNanoseconds,mtimeSeconds:e.mtimeSeconds,mtimeNanoseconds:e.mtimeNanoseconds,dev:e.dev,ino:e.ino,mode:e.mode||33188,uid:e.uid,gid:e.gid,size:e.size,path:t,oid:r,flags:{assumeValid:!1,extended:!1,stage:i,nameLength:a.length<4095?a.length:4095},stages:[]};this._addEntry(n),this._dirty=!0}delete({filepath:t}){if(this._entries.has(t))this._entries.delete(t);else for(let e of this._entries.keys())e.startsWith(t+"/")&&this._entries.delete(e);this._unmergedPaths.has(t)&&this._unmergedPaths.delete(t),this._dirty=!0}clear(){this._entries.clear(),this._dirty=!0}has({filepath:t}){return this._entries.has(t)}render(){return this.entries.map(t=>`${t.mode.toString(8)} ${t.oid}    ${t.path}`).join("\n")}static async _entryToBuffer(t){let e=h.from(t.path),r=8*Math.ceil((62+e.length+1)/8),i=h.alloc(r),a=new b(i),n=j(t);return a.writeUInt32BE(n.ctimeSeconds),a.writeUInt32BE(n.ctimeNanoseconds),a.writeUInt32BE(n.mtimeSeconds),a.writeUInt32BE(n.mtimeNanoseconds),a.writeUInt32BE(n.dev),a.writeUInt32BE(n.ino),a.writeUInt32BE(n.mode),a.writeUInt32BE(n.uid),a.writeUInt32BE(n.gid),a.writeUInt32BE(n.size),a.write(t.oid,20,"hex"),a.writeUInt16BE(function(t){let e=t.flags;return e.extended=!1,e.nameLength=Math.min(h.from(t.path).length,4095),(e.assumeValid?32768:0)+(e.extended?16384:0)+((3&e.stage)<<12)+(4095&e.nameLength)}(t)),a.write(t.path,e.length,"utf8"),i}async toObject(){let t=h.alloc(12),e=new b(t);e.write("DIRC",4,"utf8"),e.writeUInt32BE(2),e.writeUInt32BE(this.entriesFlat.length);let r=[];for(let t of this.entries)if(r.push(I._entryToBuffer(t)),t.stages.length>1)for(let e of t.stages)e&&e!==t&&r.push(I._entryToBuffer(e));r=await Promise.all(r);let i=h.concat(r),a=h.concat([t,i]),n=await k(a);return h.concat([a,h.from(n,"hex")])}}function O(t,e,r=!0,i=!0){let a=j(t),n=j(e);return r&&a.mode!==n.mode||a.mtimeSeconds!==n.mtimeSeconds||a.ctimeSeconds!==n.ctimeSeconds||a.uid!==n.uid||a.gid!==n.gid||i&&a.ino!==n.ino||a.size!==n.size}let P=null,A=Symbol("IndexCache");async function C(t,e,r){let i=await t.lstat(e),a=await t.read(e),n=await I.from(a);r.map.set(e,n),r.stats.set(e,i)}async function U(t,e,r){let i=r.stats.get(e);if(void 0===i)return!0;let a=await t.lstat(e);return null!==i&&null!==a&&O(i,a)}class N{static async acquire({fs:t,gitdir:e,cache:r,allowUnmerged:i=!0},n){let s;r[A]||(r[A]={map:new Map,stats:new Map});let o=`${e}/index`;null===P&&(P=new a({maxPending:1/0}));let l=[];return await P.acquire(o,async()=>{await U(t,o,r[A])&&await C(t,o,r[A]);let e=r[A].map.get(o);if((l=e.unmergedPaths).length&&!i)throw new p(l);if(s=await n(e),e._dirty){let i=await e.toObject();await t.write(o,i),r[A].stats.set(o,await t.lstat(o)),e._dirty=!1}}),s}}function B(t){let e=Math.max(t.lastIndexOf("/"),t.lastIndexOf("\\"));return e>-1&&(t=t.slice(e+1)),t}function D(t){let e=Math.max(t.lastIndexOf("/"),t.lastIndexOf("\\"));return -1===e?".":0===e?"/":t.slice(0,e)}function M(t){let e=new Map,r=function(t){if(!e.has(t)){let i={type:"tree",fullpath:t,basename:B(t),metadata:{},children:[]};e.set(t,i),i.parent=r(D(t)),i.parent&&i.parent!==i&&i.parent.children.push(i)}return e.get(t)};for(let i of(r("."),t))!function(t,i){if(!e.has(t)){let a={type:"blob",fullpath:t,basename:B(t),metadata:i,parent:r(D(t)),children:[]};a.parent&&a.parent.children.push(a),e.set(t,a)}e.get(t)}(i.path,i);return e}class T{constructor({fs:t,gitdir:e,cache:r}){this.treePromise=N.acquire({fs:t,gitdir:e,cache:r},async function(t){return M(t.entries)});let i=this;this.ConstructEntry=class{constructor(t){this._fullpath=t,this._type=!1,this._mode=!1,this._stat=!1,this._oid=!1}async type(){return i.type(this)}async mode(){return i.mode(this)}async stat(){return i.stat(this)}async content(){return i.content(this)}async oid(){return i.oid(this)}}}async readdir(t){let e=t._fullpath,r=(await this.treePromise).get(e);if(!r||"blob"===r.type)return null;if("tree"!==r.type)throw Error(`ENOTDIR: not a directory, scandir '${e}'`);let i=r.children.map(t=>t.fullpath);return i.sort($),i}async type(t){return!1===t._type&&await t.stat(),t._type}async mode(t){return!1===t._mode&&await t.stat(),t._mode}async stat(t){if(!1===t._stat){let e=(await this.treePromise).get(t._fullpath);if(!e)throw Error(`ENOENT: no such file or directory, lstat '${t._fullpath}'`);let r="tree"===e.type?{}:j(e.metadata);t._type="tree"===e.type?"tree":function(t){switch(t){case 16384:return"tree";case 33188:case 33261:case 40960:return"blob";case 57344:return"commit"}throw new g(`Unexpected GitTree entry mode: ${t.toString(8)}`)}(r.mode),t._mode=r.mode,"tree"===e.type?t._stat=void 0:t._stat=r}return t._stat}async content(t){}async oid(t){if(!1===t._oid){let e=(await this.treePromise).get(t._fullpath);t._oid=e.metadata.oid}return t._oid}}let H=Symbol("GitWalkSymbol");function z(){let t=Object.create(null);return Object.defineProperty(t,H,{value:function({fs:t,gitdir:e,cache:r}){return new T({fs:t,gitdir:e,cache:r})}}),Object.freeze(t),t}class W extends m{constructor(t){super(`Could not find ${t}.`),this.code=this.name=W.code,this.data={what:t}}}W.code="NotFoundError";class F extends m{constructor(t,e,r,i){super(`Object ${t} ${i?`at ${i}`:""}was anticipated to be a ${r} but it is a ${e}.`),this.code=this.name=F.code,this.data={oid:t,actual:e,expected:r,filepath:i}}}F.code="ObjectTypeError";class G extends m{constructor(t){super(`Expected a 40-char hex object id but saw "${t}".`),this.code=this.name=G.code,this.data={value:t}}}G.code="InvalidOidError";class q extends m{constructor(t){super(`Could not find a fetch refspec for remote "${t}". Make sure the config file has an entry like the following:
[remote "${t}"]
	fetch = +refs/heads/*:refs/remotes/origin/*
`),this.code=this.name=q.code,this.data={remote:t}}}q.code="NoRefspecError";class L{constructor(t){if(this.refs=new Map,this.parsedConfig=[],t){let e=null;this.parsedConfig=t.trim().split("\n").map(t=>{if(/^\s*#/.test(t))return{line:t,comment:!0};let r=t.indexOf(" ");if(t.startsWith("^")){let r=t.slice(1);return this.refs.set(e+"^{}",r),{line:t,ref:e,peeled:r}}{let i=t.slice(0,r);return e=t.slice(r+1),this.refs.set(e,i),{line:t,ref:e,oid:i}}})}return this}static from(t){return new L(t)}delete(t){this.parsedConfig=this.parsedConfig.filter(e=>e.ref!==t),this.refs.delete(t)}toString(){return this.parsedConfig.map(({line:t})=>t).join("\n")+"\n"}}class V{constructor({remotePath:t,localPath:e,force:r,matchPrefix:i}){Object.assign(this,{remotePath:t,localPath:e,force:r,matchPrefix:i})}static from(t){let[e,r,i,a,n]=t.match(/^(\+?)(.*?)(\*?):(.*?)(\*?)$/).slice(1),s="*"===i;if(s!==("*"===n))throw new g("Invalid refspec");return new V({remotePath:r,localPath:a,force:"+"===e,matchPrefix:s})}translate(t){if(this.matchPrefix){if(t.startsWith(this.remotePath))return this.localPath+t.replace(this.remotePath,"")}else if(t===this.remotePath)return this.localPath;return null}reverseTranslate(t){if(this.matchPrefix){if(t.startsWith(this.localPath))return this.remotePath+t.replace(this.localPath,"")}else if(t===this.localPath)return this.remotePath;return null}}class K{constructor(t=[]){this.rules=t}static from(t){let e=[];for(let r of t)e.push(V.from(r));return new K(e)}add(t){let e=V.from(t);this.rules.push(e)}translate(t){let e=[];for(let r of this.rules)for(let i of t){let t=r.translate(i);t&&e.push([i,t])}return e}translateOne(t){let e=null;for(let r of this.rules){let i=r.translate(t);i&&(e=i)}return e}localNamespaces(){return this.rules.filter(t=>t.matchPrefix).map(t=>t.localPath.replace(/\/$/,""))}}function Z(t,e){let r=t.replace(/\^\{\}$/,""),i=e.replace(/\^\{\}$/,""),a=-(r<i)||+(r>i);return 0===a?t.endsWith("^{}")?1:-1:a}let Y=t=>{if("true"===(t=t.trim().toLowerCase())||"yes"===t||"on"===t)return!0;if("false"===t||"no"===t||"off"===t)return!1;throw Error(`Expected 'true', 'false', 'yes', 'no', 'on', or 'off', but got ${t}`)},J={core:{filemode:Y,bare:Y,logallrefupdates:Y,symlinks:Y,ignorecase:Y,bigFileThreshold:t=>{let e=parseInt(t=t.toLowerCase());return t.endsWith("k")&&(e*=1024),t.endsWith("m")&&(e*=1048576),t.endsWith("g")&&(e*=0x40000000),e}}},X=/^\[([A-Za-z0-9-.]+)(?: "(.*)")?\]$/,Q=/^[A-Za-z0-9-.]+$/,tt=/^([A-Za-z][A-Za-z-]*)(?: *= *(.*))?$/,te=/^[A-Za-z][A-Za-z-]*$/,tr=/^(.*?)( *[#;].*)$/,ti=t=>{let e=X.exec(t);if(null!=e){let[t,r]=e.slice(1);return[t,r]}return null},ta=t=>{let e=tt.exec(t);if(null!=e){let[t,r="true"]=e.slice(1);return[t,to(tn(r))]}return null},tn=t=>{let e=tr.exec(t);if(null==e)return t;let[r,i]=e.slice(1);return ts(r)&&ts(i)?`${r}${i}`:r},ts=t=>(t.match(/(?:^|[^\\])"/g)||[]).length%2!=0,to=t=>t.split("").reduce((t,e,r,i)=>{let a='"'===e&&"\\"!==i[r-1],n="\\"===e&&'"'===i[r+1];return a||n?t:t+e},""),tl=t=>null!=t?t.toLowerCase():null,tc=(t,e,r)=>[tl(t),e,tl(r)].filter(t=>null!=t).join("."),tf=t=>{let e=t.split("."),r=e.shift(),i=e.pop(),a=e.length?e.join("."):void 0;return{section:r,subsection:a,name:i,path:tc(r,a,i),sectionPath:tc(r,a,null)}},td=(t,e)=>t.reduce((t,r,i)=>e(r)?i:t,-1);class tu{constructor(t){let e=null,r=null;this.parsedConfig=t?t.split("\n").map(t=>{let i=null,a=null,n=t.trim(),s=ti(n),o=null!=s;if(o)[e,r]=s;else{let t=ta(n);null!=t&&([i,a]=t)}let l=tc(e,r,i);return{line:t,isSection:o,section:e,subsection:r,name:i,value:a,path:l}}):[]}static from(t){return new tu(t)}async get(t,e=!1){let r=tf(t).path,i=this.parsedConfig.filter(t=>t.path===r).map(({section:t,name:e,value:r})=>{let i=J[t]&&J[t][e];return i?i(r):r});return e?i:i.pop()}async getall(t){return this.get(t,!0)}async getSubsections(t){return this.parsedConfig.filter(e=>e.section===t&&e.isSection).map(t=>t.subsection)}async deleteSection(t,e){this.parsedConfig=this.parsedConfig.filter(r=>!(r.section===t&&r.subsection===e))}async append(t,e){return this.set(t,e,!0)}async set(t,e,r=!1){let{section:i,subsection:a,name:n,path:s,sectionPath:o}=tf(t),l=td(this.parsedConfig,t=>t.path===s);if(null==e)-1!==l&&this.parsedConfig.splice(l,1);else if(-1!==l){let t=Object.assign({},this.parsedConfig[l],{name:n,value:e,modified:!0});r?this.parsedConfig.splice(l+1,0,t):this.parsedConfig[l]=t}else{let t=this.parsedConfig.findIndex(t=>t.path===o),r={section:i,subsection:a,name:n,value:e,modified:!0,path:s};Q.test(i)&&te.test(n)&&(t>=0?this.parsedConfig.splice(t+1,0,r):this.parsedConfig.push({section:i,subsection:a,modified:!0,path:o},r))}}toString(){return this.parsedConfig.map(({line:t,section:e,subsection:r,name:i,value:a,modified:n=!1})=>n?null!=i&&null!=a?"string"==typeof a&&/[#;]/.test(a)?`	${i} = "${a}"`:`	${i} = ${a}`:null!=r?`[${e} "${r}"]`:`[${e}]`:t).join("\n")}}class th{static async get({fs:t,gitdir:e}){let r=await t.read(`${e}/config`,{encoding:"utf8"});return tu.from(r)}static async save({fs:t,gitdir:e,config:r}){await t.write(`${e}/config`,r.toString(),{encoding:"utf8"})}}let tw=t=>[`${t}`,`refs/${t}`,`refs/tags/${t}`,`refs/heads/${t}`,`refs/remotes/${t}`,`refs/remotes/${t}/HEAD`],tm=["config","description","index","shallow","commondir"];async function tp(t,e){return void 0===i&&(i=new a),i.acquire(t,e)}class tg{static async updateRemoteRefs({fs:t,gitdir:e,remote:r,refs:i,symrefs:a,tags:n,refspecs:o,prune:l=!1,pruneTags:c=!1}){for(let t of i.values())if(!t.match(/[0-9a-f]{40}/))throw new G(t);let f=await th.get({fs:t,gitdir:e});if(!o){if(0===(o=await f.getall(`remote.${r}.fetch`)).length)throw new q(r);o.unshift(`+HEAD:refs/remotes/${r}/HEAD`)}let d=K.from(o),u=new Map;if(c){let r=await tg.listRefs({fs:t,gitdir:e,filepath:"refs/tags"});await tg.deleteRefs({fs:t,gitdir:e,refs:r.map(t=>`refs/tags/${t}`)})}if(n){for(let r of i.keys())if(r.startsWith("refs/tags")&&!r.endsWith("^{}")&&!await tg.exists({fs:t,gitdir:e,ref:r})){let t=i.get(r);u.set(r,t)}}for(let[t,e]of d.translate([...i.keys()])){let r=i.get(t);u.set(e,r)}for(let[t,e]of d.translate([...a.keys()])){let r=a.get(t),i=d.translateOne(r);i&&u.set(e,`ref: ${i}`)}let h=[];if(l){for(let r of d.localNamespaces())for(let i of(await tg.listRefs({fs:t,gitdir:e,filepath:r})).map(t=>`${r}/${t}`))u.has(i)||h.push(i);h.length>0&&await tg.deleteRefs({fs:t,gitdir:e,refs:h})}for(let[r,i]of u)await tp(r,async()=>t.write((0,s.join)(e,r),`${i.trim()}
`,"utf8"));return{pruned:h}}static async writeRef({fs:t,gitdir:e,ref:r,value:i}){if(!i.match(/[0-9a-f]{40}/))throw new G(i);await tp(r,async()=>t.write((0,s.join)(e,r),`${i.trim()}
`,"utf8"))}static async writeSymbolicRef({fs:t,gitdir:e,ref:r,value:i}){await tp(r,async()=>t.write((0,s.join)(e,r),`ref: ${i.trim()}
`,"utf8"))}static async deleteRef({fs:t,gitdir:e,ref:r}){return tg.deleteRefs({fs:t,gitdir:e,refs:[r]})}static async deleteRefs({fs:t,gitdir:e,refs:r}){await Promise.all(r.map(r=>t.rm((0,s.join)(e,r))));let i=await tp("packed-refs",async()=>t.read(`${e}/packed-refs`,{encoding:"utf8"})),a=L.from(i),n=a.refs.size;for(let t of r)a.refs.has(t)&&a.delete(t);a.refs.size<n&&(i=a.toString(),await tp("packed-refs",async()=>t.write(`${e}/packed-refs`,i,{encoding:"utf8"})))}static async resolve({fs:t,gitdir:e,ref:r,depth:i}){if(void 0!==i&&-1==--i)return r;if(r.startsWith("ref: "))return r=r.slice(5),tg.resolve({fs:t,gitdir:e,ref:r,depth:i});if(40===r.length&&/[0-9a-f]{40}/.test(r))return r;let a=await tg.packedRefs({fs:t,gitdir:e});for(let n of tw(r).filter(t=>!tm.includes(t))){let r=await tp(n,async()=>await t.read(`${e}/${n}`,{encoding:"utf8"})||a.get(n));if(r)return tg.resolve({fs:t,gitdir:e,ref:r.trim(),depth:i})}throw new W(r)}static async exists({fs:t,gitdir:e,ref:r}){try{return await tg.expand({fs:t,gitdir:e,ref:r}),!0}catch(t){return!1}}static async expand({fs:t,gitdir:e,ref:r}){if(40===r.length&&/[0-9a-f]{40}/.test(r))return r;let i=await tg.packedRefs({fs:t,gitdir:e});for(let a of tw(r))if(await tp(a,async()=>t.exists(`${e}/${a}`))||i.has(a))return a;throw new W(r)}static async expandAgainstMap({ref:t,map:e}){for(let r of tw(t))if(await e.has(r))return r;throw new W(t)}static resolveAgainstMap({ref:t,fullref:e=t,depth:r,map:i}){if(void 0!==r&&-1==--r)return{fullref:e,oid:t};if(t.startsWith("ref: "))return t=t.slice(5),tg.resolveAgainstMap({ref:t,fullref:e,depth:r,map:i});if(40===t.length&&/[0-9a-f]{40}/.test(t))return{fullref:e,oid:t};for(let e of tw(t)){let t=i.get(e);if(t)return tg.resolveAgainstMap({ref:t.trim(),fullref:e,depth:r,map:i})}throw new W(t)}static async packedRefs({fs:t,gitdir:e}){let r=await tp("packed-refs",async()=>t.read(`${e}/packed-refs`,{encoding:"utf8"}));return L.from(r).refs}static async listRefs({fs:t,gitdir:e,filepath:r}){let i=tg.packedRefs({fs:t,gitdir:e}),a=null;try{a=(a=await t.readdirDeep(`${e}/${r}`)).map(t=>t.replace(`${e}/${r}/`,""))}catch(t){a=[]}for(let t of(await i).keys())t.startsWith(r)&&(t=t.replace(r+"/",""),a.includes(t)||a.push(t));return a.sort(Z),a}static async listBranches({fs:t,gitdir:e,remote:r}){return r?tg.listRefs({fs:t,gitdir:e,filepath:`refs/remotes/${r}`}):tg.listRefs({fs:t,gitdir:e,filepath:"refs/heads"})}static async listTags({fs:t,gitdir:e}){return(await tg.listRefs({fs:t,gitdir:e,filepath:"refs/tags"})).filter(t=>!t.endsWith("^{}"))}}function ty(t,e){return $(tb(t),tb(e))}function tb(t){return"040000"===t.mode?t.path+"/":t.path}function t$(t){switch(t){case"040000":return"tree";case"100644":case"100755":case"120000":return"blob";case"160000":return"commit"}throw new g(`Unexpected GitTree entry mode: ${t}`)}function tv(t){return!t.oid&&t.sha&&(t.oid=t.sha),t.mode=function(t){if("number"==typeof t&&(t=t.toString(8)),t.match(/^0?4.*/))return"040000";if(t.match(/^1006.*/))return"100644";if(t.match(/^1007.*/))return"100755";if(t.match(/^120.*/))return"120000";if(t.match(/^160.*/))return"160000";throw new g(`Could not understand file mode: ${t}`)}(t.mode),t.type||(t.type=t$(t.mode)),t}class tx{constructor(t){if(h.isBuffer(t))this._entries=function(t){let e=[],r=0;for(;r<t.length;){let i=t.indexOf(32,r);if(-1===i)throw new g(`GitTree: Error parsing buffer at byte location ${r}: Could not find the next space character.`);let a=t.indexOf(0,r);if(-1===a)throw new g(`GitTree: Error parsing buffer at byte location ${r}: Could not find the next null character.`);let n=t.slice(r,i).toString("utf8");"40000"===n&&(n="040000");let s=t$(n),o=t.slice(i+1,a).toString("utf8");if(o.includes("\\")||o.includes("/"))throw new y(o);let l=t.slice(a+1,a+21).toString("hex");r=a+21,e.push({mode:n,path:o,oid:l,type:s})}return e}(t);else if(Array.isArray(t))this._entries=t.map(tv);else throw new g("invalid type passed to GitTree constructor");this._entries.sort(v)}static from(t){return new tx(t)}render(){return this._entries.map(t=>`${t.mode} ${t.type} ${t.oid}    ${t.path}`).join("\n")}toObject(){let t=[...this._entries];return t.sort(ty),h.concat(t.map(t=>{let e=h.from(t.mode.replace(/^0/,"")),r=h.from(" "),i=h.from(t.path,"utf8"),a=h.from([0]),n=h.from(t.oid,"hex");return h.concat([e,r,i,a,n])}))}entries(){return this._entries}*[Symbol.iterator](){for(let t of this._entries)yield t}}class t_{static wrap({type:t,object:e}){return h.concat([h.from(`${t} ${e.byteLength.toString()}\0`),h.from(e)])}static unwrap(t){let e=t.indexOf(32),r=t.indexOf(0),i=t.slice(0,e).toString("utf8"),a=t.slice(e+1,r).toString("utf8"),n=t.length-(r+1);if(parseInt(a)!==n)throw new g(`Length mismatch: expected ${a} bytes but got ${n} instead.`);return{type:i,object:h.from(t.slice(r+1))}}}async function tj({fs:t,gitdir:e,oid:r}){let i=`objects/${r.slice(0,2)}/${r.slice(2)}`,a=await t.read(`${e}/${i}`);return a?{object:a,format:"deflated",source:i}:null}function tE(t){let e=0,r=0,i=null;do e|=(127&(i=t.readUInt8()))<<r,r+=7;while(128&i);return e}function tk(t,e,r){let i=0,a=0;for(;r--;)1&e&&(i|=t.readUInt8()<<a),e>>=1,a+=8;return i}function tS(t,e){let r=t.readUInt8();if(!(128&r))return t.slice(r);{let i=tk(t,15&r,4),a=tk(t,(112&r)>>4,3);return 0===a&&(a=65536),e.slice(i,i+a)}}function tR(t){let e;return t[Symbol.asyncIterator]?t[Symbol.asyncIterator]():t[Symbol.iterator]?t[Symbol.iterator]():t.next?t:(e=[t],{next:()=>Promise.resolve({done:0===e.length,value:e.pop()}),return:()=>(e=[],{}),[Symbol.asyncIterator](){return this}})}class tI{constructor(t){if(void 0===h)throw Error("Missing Buffer dependency");this.stream=tR(t),this.buffer=null,this.cursor=0,this.undoCursor=0,this.started=!1,this._ended=!1,this._discardedBytes=0}eof(){return this._ended&&this.cursor===this.buffer.length}tell(){return this._discardedBytes+this.cursor}async byte(){if(!this.eof()&&(this.started||await this._init(),this.cursor!==this.buffer.length||(await this._loadnext(),!this._ended)))return this._moveCursor(1),this.buffer[this.undoCursor]}async chunk(){if(!this.eof()&&(this.started||await this._init(),this.cursor!==this.buffer.length||(await this._loadnext(),!this._ended)))return this._moveCursor(this.buffer.length),this.buffer.slice(this.undoCursor,this.cursor)}async read(t){if(!this.eof())return this.started||await this._init(),this.cursor+t>this.buffer.length&&(this._trim(),await this._accumulate(t)),this._moveCursor(t),this.buffer.slice(this.undoCursor,this.cursor)}async skip(t){this.eof()||(this.started||await this._init(),this.cursor+t>this.buffer.length&&(this._trim(),await this._accumulate(t)),this._moveCursor(t))}async undo(){this.cursor=this.undoCursor}async _next(){this.started=!0;let{done:t,value:e}=await this.stream.next();return t&&(this._ended=!0,!e)?h.alloc(0):(e&&(e=h.from(e)),e)}_trim(){this.buffer=this.buffer.slice(this.undoCursor),this.cursor-=this.undoCursor,this._discardedBytes+=this.undoCursor,this.undoCursor=0}_moveCursor(t){this.undoCursor=this.cursor,this.cursor+=t,this.cursor>this.buffer.length&&(this.cursor=this.buffer.length)}async _accumulate(t){if(this._ended)return;let e=[this.buffer];for(;this.cursor+t>e.reduce((t,e)=>t+e.length,0);){let t=await this._next();if(this._ended)break;e.push(t)}this.buffer=h.concat(e)}async _loadnext(){this._discardedBytes+=this.buffer.length,this.undoCursor=0,this.cursor=0,this.buffer=await this._next()}async _init(){this.buffer=await this._next()}}async function tO(t,e){let r=new tI(t),i=await r.read(4);if("PACK"!==(i=i.toString("utf8")))throw new g(`Invalid PACK header '${i}'`);let a=await r.read(4);if(2!==(a=a.readUInt32BE(0)))throw new g(`Invalid packfile version: ${a}`);let n=await r.read(4);if(!((n=n.readUInt32BE(0))<1))for(;!r.eof()&&n--;){let t=r.tell(),{type:i,length:a,ofs:s,reference:o}=await tP(r),c=new l.Inflate;for(;!c.result;){let l=await r.chunk();if(!l)break;if(c.push(l,!1),c.err)throw new g(`Pako error: ${c.msg}`);if(c.result){if(c.result.length!==a)throw new g("Inflated object size is different from that stated in packfile.");await r.undo(),await r.read(l.length-c.strm.avail_in);let f=r.tell();await e({data:c.result,type:i,num:n,offset:t,end:f,reference:o,ofs:s})}}}}async function tP(t){let e,r,i=await t.byte(),a=i>>4&7,n=15&i;if(128&i){let e=4;do n|=(127&(i=await t.byte()))<<e,e+=7;while(128&i)}if(6===a){let a=0;e=0;let n=[];do e|=(127&(i=await t.byte()))<<a,a+=7,n.push(i);while(128&i);r=h.from(n)}return 7===a&&(r=await t.read(20)),{type:a,length:n,ofs:e,reference:r}}let tA=!1;async function tC(t){return null===tA&&(tA=function(){try{return new DecompressionStream("deflate"),!0}catch(t){}return!1}()),tA?tU(t):l.inflate(t)}async function tU(t){let e=new DecompressionStream("deflate"),r=new Blob([t]).stream().pipeThrough(e);return new Uint8Array(await new Response(r).arrayBuffer())}class tN{constructor(t){Object.assign(this,t),this.offsetCache={}}static async fromIdx({idx:t,getExternalRefDelta:e}){let r=new b(t);if("ff744f63"!==r.slice(4).toString("hex"))return;let i=r.readUInt32BE();if(2!==i)throw new g(`Unable to read version ${i} packfile IDX. (Only version 2 supported)`);if(t.byteLength>0x80000000)throw new g("To keep implementation simple, I haven't implemented the layer 5 feature needed to support packfiles > 2GB in size.");r.seek(r.tell()+1020);let a=r.readUInt32BE(),n=[];for(let t=0;t<a;t++){let e=r.slice(20).toString("hex");n[t]=e}r.seek(r.tell()+4*a);let s=new Map;for(let t=0;t<a;t++)s.set(n[t],r.readUInt32BE());return new tN({hashes:n,crcs:{},offsets:s,packfileSha:r.slice(20).toString("hex"),getExternalRefDelta:e})}static async fromPack({pack:t,getExternalRefDelta:e,onProgress:r}){let i={1:"commit",2:"tree",3:"blob",4:"tag",6:"ofs-delta",7:"ref-delta"},a={},n=t.slice(-20).toString("hex"),s=[],l={},c=new Map,f=null,d=null;await tO([t],async({data:t,type:e,reference:n,offset:s,num:o})=>{null===f&&(f=o);let l=Math.floor((f-o)*100/f);l!==d&&r&&await r({phase:"Receiving objects",loaded:f-o,total:f}),d=l,["commit","tree","blob","tag"].includes(e=i[e])?a[s]={type:e,offset:s}:"ofs-delta"===e?a[s]={type:e,offset:s}:"ref-delta"===e&&(a[s]={type:e,offset:s})});let u=Object.keys(a).map(Number);for(let[e,r]of u.entries()){let i=e+1===u.length?t.byteLength-20:u[e+1],n=a[r],s=o.buf(t.slice(r,i))>>>0;n.end=i,n.crc=s}let h=new tN({pack:Promise.resolve(t),packfileSha:n,crcs:l,hashes:s,offsets:c,getExternalRefDelta:e});d=null;let w=0,m=[0,0,0,0,0,0,0,0,0,0,0,0];for(let t in a){t=Number(t);let e=Math.floor(100*w/f);e!==d&&r&&await r({phase:"Resolving deltas",loaded:w,total:f}),w++,d=e;let i=a[t];if(!i.oid)try{h.readDepth=0,h.externalReadDepth=0;let{type:e,object:r}=await h.readSlice({start:t});m[h.readDepth]+=1;let a=await k(t_.wrap({type:e,object:r}));i.oid=a,s.push(a),c.set(a,t),l[a]=i.crc}catch(t){continue}}return s.sort(),h}async toBuffer(){let t=[],e=(e,r)=>{t.push(h.from(e,r))};e("ff744f63","hex"),e("00000002","hex");let r=new b(h.alloc(1024));for(let t=0;t<256;t++){let e=0;for(let r of this.hashes)parseInt(r.slice(0,2),16)<=t&&e++;r.writeUInt32BE(e)}for(let i of(t.push(r.buffer),this.hashes))e(i,"hex");let i=new b(h.alloc(4*this.hashes.length));for(let t of this.hashes)i.writeUInt32BE(this.crcs[t]);t.push(i.buffer);let a=new b(h.alloc(4*this.hashes.length));for(let t of this.hashes)a.writeUInt32BE(this.offsets.get(t));t.push(a.buffer),e(this.packfileSha,"hex");let n=h.concat(t),s=await k(n),o=h.alloc(20);return o.write(s,"hex"),h.concat([n,o])}async load({pack:t}){this.pack=t}async unload(){this.pack=null}async read({oid:t}){if(!this.offsets.get(t)){if(this.getExternalRefDelta)return this.externalReadDepth++,this.getExternalRefDelta(t);throw new g(`Could not read object ${t} from packfile`)}let e=this.offsets.get(t);return this.readSlice({start:e})}async readSlice({start:t}){if(this.offsetCache[t])return Object.assign({},this.offsetCache[t]);if(this.readDepth++,!this.pack)throw new g("Tried to read from a GitPackIndex with no packfile loaded into memory");let e=(await this.pack).slice(t),r=new b(e),i=r.readUInt8(),a=112&i,n={16:"commit",32:"tree",48:"blob",64:"tag",96:"ofs_delta",112:"ref_delta"}[a];if(void 0===n)throw new g("Unrecognized type: 0b"+a.toString(2));let s=15&i,o=s;128&i&&(o=function(t,e){let r=e,i=4,a=null;do r|=(127&(a=t.readUInt8()))<<i,i+=7;while(128&a);return r}(r,s));let l=null,c=null;if("ofs_delta"===n){let e=t-function(t){let e=[],r=0,i=0;do{let a=127&(r=t.readUInt8());e.push(a),i=128&r}while(i);return e.reduce((t,e)=>t+1<<7|e,-1)}(r);({object:l,type:n}=await this.readSlice({start:e}))}if("ref_delta"===n){let t=r.slice(20).toString("hex");({object:l,type:n}=await this.read({oid:t}))}let f=e.slice(r.tell());if((c=h.from(await tC(f))).byteLength!==o)throw new g(`Packfile told us object would have length ${o} but it had length ${c.byteLength}`);return l&&(c=h.from(function(t,e){let r;let i=new b(t),a=tE(i);if(a!==e.byteLength)throw new g(`applyDelta expected source buffer to be ${a} bytes but the provided buffer was ${e.length} bytes`);let n=tE(i),s=tS(i,e);if(s.byteLength===n)r=s;else{let t=new b(r=h.alloc(n));for(t.copy(s);!i.eof();)t.copy(tS(i,e));let a=t.tell();if(n!==a)throw new g(`applyDelta expected target buffer to be ${n} bytes but the resulting buffer was ${a} bytes`)}return r}(c,l))),this.readDepth>3&&(this.offsetCache[t]={type:n,object:c}),{type:n,format:"content",object:c}}}let tB=Symbol("PackfileCache");async function tD({fs:t,filename:e,getExternalRefDelta:r,emitter:i,emitterPrefix:a}){let n=await t.read(e);return tN.fromIdx({idx:n,getExternalRefDelta:r})}function tM({fs:t,cache:e,filename:r,getExternalRefDelta:i,emitter:a,emitterPrefix:n}){e[tB]||(e[tB]=new Map);let s=e[tB].get(r);return s||(s=tD({fs:t,filename:r,getExternalRefDelta:i,emitter:a,emitterPrefix:n}),e[tB].set(r,s)),s}async function tT({fs:t,cache:e,gitdir:r,oid:i,format:a="content",getExternalRefDelta:n}){let o=await t.readdir((0,s.join)(r,"objects/pack"));for(let a of o=o.filter(t=>t.endsWith(".idx"))){let s=`${r}/objects/pack/${a}`,o=await tM({fs:t,cache:e,filename:s,getExternalRefDelta:n});if(o.error)throw new g(o.error);if(o.offsets.has(i)){if(!o.pack){let e=s.replace(/idx$/,"pack");o.pack=t.read(e)}let e=await o.read({oid:i,getExternalRefDelta:n});return e.format="content",e.source=`objects/pack/${a.replace(/idx$/,"pack")}`,e}}return null}async function tH({fs:t,cache:e,gitdir:r,oid:i,format:a="content"}){let n;if("4b825dc642cb6eb9a060e54bf8d69288fbee4904"===i&&(n={format:"wrapped",object:h.from(`tree 0\0`)}),n||(n=await tj({fs:t,gitdir:r,oid:i})),!n){if(!(n=await tT({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:i=>tH({fs:t,cache:e,gitdir:r,oid:i})})))throw new W(i);return n}if("deflated"===a||("deflated"===n.format&&(n.object=h.from(await tC(n.object)),n.format="wrapped"),"wrapped"===a))return n;let s=await k(n.object);if(s!==i)throw new g(`SHA check failed! Expected ${i}, computed ${s}`);let{object:o,type:l}=t_.unwrap(n.object);if(n.type=l,n.object=o,n.format="content","content"===a)return n;throw new g(`invalid requested format "${a}"`)}class tz extends m{constructor(t,e,r=!0){super(`Failed to create ${t} at ${e} because it already exists.${r?` (Hint: use 'force: true' parameter to overwrite existing ${t}.)`:""}`),this.code=this.name=tz.code,this.data={noun:t,where:e,canForce:r}}}tz.code="AlreadyExistsError";class tW extends m{constructor(t,e,r){super(`Found multiple ${t} matching "${e}" (${r.join(", ")}). Use a longer abbreviation length to disambiguate them.`),this.code=this.name=tW.code,this.data={nouns:t,short:e,matches:r}}}tW.code="AmbiguousError";class tF extends m{constructor(t){super(`Your local changes to the following files would be overwritten by checkout: ${t.join(", ")}`),this.code=this.name=tF.code,this.data={filepaths:t}}}tF.code="CheckoutConflictError";class tG extends m{constructor(t,e){super(`Failed to checkout "${t}" because commit ${e} is not available locally. Do a git fetch to make the branch available locally.`),this.code=this.name=tG.code,this.data={ref:t,oid:e}}}tG.code="CommitNotFetchedError";class tq extends m{constructor(){super("Empty response from git server."),this.code=this.name=tq.code,this.data={}}}tq.code="EmptyServerResponseError";class tL extends m{constructor(){super("A simple fast-forward merge was not possible."),this.code=this.name=tL.code,this.data={}}}tL.code="FastForwardError";class tV extends m{constructor(t,e){super(`One or more branches were not updated: ${t}`),this.code=this.name=tV.code,this.data={prettyDetails:t,result:e}}}tV.code="GitPushError";class tK extends m{constructor(t,e,r){super(`HTTP Error: ${t} ${e}`),this.code=this.name=tK.code,this.data={statusCode:t,statusMessage:e,response:r}}}tK.code="HttpError";class tZ extends m{constructor(t){let e="invalid filepath";"leading-slash"===t||"trailing-slash"===t?e='"filepath" parameter should not include leading or trailing directory separators because these can cause problems on some platforms.':"directory"===t&&(e='"filepath" should not be a directory.'),super(e),this.code=this.name=tZ.code,this.data={reason:t}}}tZ.code="InvalidFilepathError";class tY extends m{constructor(t,e){super(`"${t}" would be an invalid git reference. (Hint: a valid alternative would be "${e}".)`),this.code=this.name=tY.code,this.data={ref:t,suggestion:e}}}tY.code="InvalidRefNameError";class tJ extends m{constructor(t){super(`Maximum search depth of ${t} exceeded.`),this.code=this.name=tJ.code,this.data={depth:t}}}tJ.code="MaxDepthError";class tX extends m{constructor(){super("Merges with conflicts are not supported yet."),this.code=this.name=tX.code,this.data={}}}tX.code="MergeNotSupportedError";class tQ extends m{constructor(t,e,r,i){super(`Automatic merge failed with one or more merge conflicts in the following files: ${t.toString()}. Fix conflicts then commit the result.`),this.code=this.name=tQ.code,this.data={filepaths:t,bothModified:e,deleteByUs:r,deleteByTheirs:i}}}tQ.code="MergeConflictError";class t0 extends m{constructor(t){super(`No name was provided for ${t} in the argument or in the .git/config file.`),this.code=this.name=t0.code,this.data={role:t}}}t0.code="MissingNameError";class t1 extends m{constructor(t){super(`The function requires a "${t}" parameter but none was provided.`),this.code=this.name=t1.code,this.data={parameter:t}}}t1.code="MissingParameterError";class t2 extends m{constructor(t){super('There are multiple errors that were thrown by the method. Please refer to the "errors" property to see more'),this.code=this.name=t2.code,this.data={errors:t},this.errors=t}}t2.code="MultipleGitError";class t8 extends m{constructor(t,e){super(`Expected "${t}" but received "${e}".`),this.code=this.name=t8.code,this.data={expected:t,actual:e}}}t8.code="ParseError";class t4 extends m{constructor(t){let e="";"not-fast-forward"===t?e=" because it was not a simple fast-forward":"tag-exists"===t&&(e=" because tag already exists"),super(`Push rejected${e}. Use "force: true" to override.`),this.code=this.name=t4.code,this.data={reason:t}}}t4.code="PushRejectedError";class t3 extends m{constructor(t,e){super(`Remote does not support the "${t}" so the "${e}" parameter cannot be used.`),this.code=this.name=t3.code,this.data={capability:t,parameter:e}}}t3.code="RemoteCapabilityError";class t6 extends m{constructor(t,e){super(`Remote did not reply using the "smart" HTTP protocol. Expected "001e# service=git-upload-pack" but received: ${t}`),this.code=this.name=t6.code,this.data={preview:t,response:e}}}t6.code="SmartHttpError";class t5 extends m{constructor(t,e,r){super(`Git remote "${t}" uses an unrecognized transport protocol: "${e}"`),this.code=this.name=t5.code,this.data={url:t,transport:e,suggestion:r}}}t5.code="UnknownTransportError";class t9 extends m{constructor(t){super(`Cannot parse remote URL: "${t}"`),this.code=this.name=t9.code,this.data={url:t}}}t9.code="UrlParseError";class t7 extends m{constructor(){super("The operation was canceled."),this.code=this.name=t7.code,this.data={}}}t7.code="UserCanceledError";class et extends m{constructor(t){super(`Could not merge index: Entry for '${t}' is not up to date. Either reset the index entry to HEAD, or stage your unstaged changes.`),this.code=this.name=et.code,this.data={filepath:t}}}et.code="IndexResetError";class ee extends m{constructor(t){super(`"${t}" does not point to any commit. You're maybe working on a repository with no commits yet. `),this.code=this.name=ee.code,this.data={ref:t}}}ee.code="NoCommitError";var er=Object.freeze({__proto__:null,AlreadyExistsError:tz,AmbiguousError:tW,CheckoutConflictError:tF,CommitNotFetchedError:tG,EmptyServerResponseError:tq,FastForwardError:tL,GitPushError:tV,HttpError:tK,InternalError:g,InvalidFilepathError:tZ,InvalidOidError:G,InvalidRefNameError:tY,MaxDepthError:tJ,MergeNotSupportedError:tX,MergeConflictError:tQ,MissingNameError:t0,MissingParameterError:t1,MultipleGitError:t2,NoRefspecError:q,NotFoundError:W,ObjectTypeError:F,ParseError:t8,PushRejectedError:t4,RemoteCapabilityError:t3,SmartHttpError:t6,UnknownTransportError:t5,UnsafeFilepathError:y,UrlParseError:t9,UserCanceledError:t7,UnmergedPathsError:p,IndexResetError:et,NoCommitError:ee});function ei({name:t,email:e,timestamp:r,timezoneOffset:i}){return i=function(t){var e,r;let i=Math.sign(r=0===(e=t)?e:-e)||(Object.is(r,-0)?-1:1),a=Math.floor((t=Math.abs(t))/60);t-=60*a;let n=String(a),s=String(t);return n.length<2&&(n="0"+n),s.length<2&&(s="0"+s),(-1===i?"-":"+")+n+s}(i),`${t} <${e}> ${r} ${i}`}function ea(t){return t=(t=(t=t.replace(/\r/g,"")).replace(/^\n+/,"")).replace(/\n+$/,"")+"\n"}function en(t){let[,e,r,i,a]=t.match(/^(.*) <(.*)> (.*) (.*)$/);return{name:e,email:r,timestamp:Number(i),timezoneOffset:function(t){var e;let[,r,i,a]=t.match(/(\+|-)(\d\d)(\d\d)/);return 0==(e=a=("+"===r?1:-1)*(60*Number(i)+Number(a)))?e:-e}(a)}}class es{constructor(t){if("string"==typeof t)this._tag=t;else if(h.isBuffer(t))this._tag=t.toString("utf8");else if("object"==typeof t)this._tag=es.render(t);else throw new g("invalid type passed to GitAnnotatedTag constructor")}static from(t){return new es(t)}static render(t){return`object ${t.object}
type ${t.type}
tag ${t.tag}
tagger ${ei(t.tagger)}

${t.message}
${t.gpgsig?t.gpgsig:""}`}justHeaders(){return this._tag.slice(0,this._tag.indexOf("\n\n"))}message(){let t=this.withoutSignature();return t.slice(t.indexOf("\n\n")+2)}parse(){return Object.assign(this.headers(),{message:this.message(),gpgsig:this.gpgsig()})}render(){return this._tag}headers(){let t=this.justHeaders().split("\n"),e=[];for(let r of t)" "===r[0]?e[e.length-1]+="\n"+r.slice(1):e.push(r);let r={};for(let t of e){let e=t.slice(0,t.indexOf(" ")),i=t.slice(t.indexOf(" ")+1);Array.isArray(r[e])?r[e].push(i):r[e]=i}return r.tagger&&(r.tagger=en(r.tagger)),r.committer&&(r.committer=en(r.committer)),r}withoutSignature(){let t=ea(this._tag);return -1===t.indexOf("\n-----BEGIN PGP SIGNATURE-----")?t:t.slice(0,t.lastIndexOf("\n-----BEGIN PGP SIGNATURE-----"))}gpgsig(){if(-1!==this._tag.indexOf("\n-----BEGIN PGP SIGNATURE-----"))return ea(this._tag.slice(this._tag.indexOf("-----BEGIN PGP SIGNATURE-----"),this._tag.indexOf("-----END PGP SIGNATURE-----")+27))}payload(){return this.withoutSignature()+"\n"}toObject(){return h.from(this._tag,"utf8")}static async sign(t,e,r){let i=t.payload(),{signature:a}=await e({payload:i,secretKey:r}),n=i+(a=ea(a));return es.from(n)}}function eo(t){return t.trim().split("\n").map(t=>" "+t).join("\n")+"\n"}class el{constructor(t){if("string"==typeof t)this._commit=t;else if(h.isBuffer(t))this._commit=t.toString("utf8");else if("object"==typeof t)this._commit=el.render(t);else throw new g("invalid type passed to GitCommit constructor")}static fromPayloadSignature({payload:t,signature:e}){let r=el.justHeaders(t),i=el.justMessage(t);return new el(ea(r+"\ngpgsig"+eo(e)+"\n"+i))}static from(t){return new el(t)}toObject(){return h.from(this._commit,"utf8")}headers(){return this.parseHeaders()}message(){return el.justMessage(this._commit)}parse(){return Object.assign({message:this.message()},this.headers())}static justMessage(t){return ea(t.slice(t.indexOf("\n\n")+2))}static justHeaders(t){return t.slice(0,t.indexOf("\n\n"))}parseHeaders(){let t=el.justHeaders(this._commit).split("\n"),e=[];for(let r of t)" "===r[0]?e[e.length-1]+="\n"+r.slice(1):e.push(r);let r={parent:[]};for(let t of e){let e=t.slice(0,t.indexOf(" ")),i=t.slice(t.indexOf(" ")+1);Array.isArray(r[e])?r[e].push(i):r[e]=i}return r.author&&(r.author=en(r.author)),r.committer&&(r.committer=en(r.committer)),r}static renderHeaders(t){let e="";if(t.tree?e+=`tree ${t.tree}
`:e+=`tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904
`,t.parent){if(void 0===t.parent.length)throw new g("commit 'parent' property should be an array");for(let r of t.parent)e+=`parent ${r}
`}let r=t.author;e+=`author ${ei(r)}
`;let i=t.committer||t.author;return e+=`committer ${ei(i)}
`,t.gpgsig&&(e+="gpgsig"+eo(t.gpgsig)),e}static render(t){return el.renderHeaders(t)+"\n"+ea(t.message)}render(){return this._commit}withoutSignature(){let t=ea(this._commit);return -1===t.indexOf("\ngpgsig")?t:ea(t.slice(0,t.indexOf("\ngpgsig"))+"\n"+t.slice(t.indexOf("-----END PGP SIGNATURE-----\n")+28))}isolateSignature(){return this._commit.slice(this._commit.indexOf("-----BEGIN PGP SIGNATURE-----"),this._commit.indexOf("-----END PGP SIGNATURE-----")+27).split("\n").map(t=>t.replace(/^ /,"")).join("\n")}static async sign(t,e,r){let i=t.withoutSignature(),a=el.justMessage(t._commit),{signature:n}=await e({payload:i,secretKey:r});n=ea(n);let s=el.justHeaders(t._commit)+"\ngpgsig"+eo(n)+"\n"+a;return el.from(s)}}async function ec({fs:t,cache:e,gitdir:r,oid:i}){if("4b825dc642cb6eb9a060e54bf8d69288fbee4904"===i)return{tree:tx.from([]),oid:i};let{type:a,object:n}=await tH({fs:t,cache:e,gitdir:r,oid:i});if("tag"===a)return ec({fs:t,cache:e,gitdir:r,oid:i=es.from(n).parse().object});if("commit"===a)return ec({fs:t,cache:e,gitdir:r,oid:i=el.from(n).parse().tree});if("tree"!==a)throw new F(i,a,"tree");return{tree:tx.from(n),oid:i}}class ef{constructor({fs:t,gitdir:e,ref:r,cache:i}){this.fs=t,this.cache=i,this.gitdir=e,this.mapPromise=(async()=>{let i;let a=new Map;try{i=await tg.resolve({fs:t,gitdir:e,ref:r})}catch(t){t instanceof W&&(i="4b825dc642cb6eb9a060e54bf8d69288fbee4904")}let n=await ec({fs:t,cache:this.cache,gitdir:e,oid:i});return n.type="tree",n.mode="40000",a.set(".",n),a})();let a=this;this.ConstructEntry=class{constructor(t){this._fullpath=t,this._type=!1,this._mode=!1,this._stat=!1,this._content=!1,this._oid=!1}async type(){return a.type(this)}async mode(){return a.mode(this)}async stat(){return a.stat(this)}async content(){return a.content(this)}async oid(){return a.oid(this)}}}async readdir(t){let e=t._fullpath,{fs:r,cache:i,gitdir:a}=this,n=await this.mapPromise,o=n.get(e);if(!o)throw Error(`No obj for ${e}`);let l=o.oid;if(!l)throw Error(`No oid for obj ${JSON.stringify(o)}`);if("tree"!==o.type)return null;let{type:c,object:f}=await tH({fs:r,cache:i,gitdir:a,oid:l});if(c!==o.type)throw new F(l,c,o.type);let d=tx.from(f);for(let t of d)n.set((0,s.join)(e,t.path),t);return d.entries().map(t=>(0,s.join)(e,t.path))}async type(t){if(!1===t._type){let{type:e}=(await this.mapPromise).get(t._fullpath);t._type=e}return t._type}async mode(t){if(!1===t._mode){let{mode:e}=(await this.mapPromise).get(t._fullpath);t._mode=x(parseInt(e,8))}return t._mode}async stat(t){}async content(t){if(!1===t._content){let e=await this.mapPromise,{fs:r,cache:i,gitdir:a}=this,n=e.get(t._fullpath).oid,{type:s,object:o}=await tH({fs:r,cache:i,gitdir:a,oid:n});"blob"!==s?t._content=void 0:t._content=new Uint8Array(o)}return t._content}async oid(t){if(!1===t._oid){let e=(await this.mapPromise).get(t._fullpath);t._oid=e.oid}return t._oid}}function ed({ref:t="HEAD"}={}){let e=Object.create(null);return Object.defineProperty(e,H,{value:function({fs:e,gitdir:r,cache:i}){return new ef({fs:e,gitdir:r,ref:t,cache:i})}}),Object.freeze(e),e}class eu{constructor({fs:t,dir:e,gitdir:r,cache:i}){this.fs=t,this.cache=i,this.dir=e,this.gitdir=r;let a=this;this.ConstructEntry=class{constructor(t){this._fullpath=t,this._type=!1,this._mode=!1,this._stat=!1,this._content=!1,this._oid=!1}async type(){return a.type(this)}async mode(){return a.mode(this)}async stat(){return a.stat(this)}async content(){return a.content(this)}async oid(){return a.oid(this)}}}async readdir(t){let e=t._fullpath,{fs:r,dir:i}=this,a=await r.readdir((0,s.join)(i,e));return null===a?null:a.map(t=>(0,s.join)(e,t))}async type(t){return!1===t._type&&await t.stat(),t._type}async mode(t){return!1===t._mode&&await t.stat(),t._mode}async stat(t){if(!1===t._stat){let{fs:e,dir:r}=this,i=await e.lstat(`${r}/${t._fullpath}`);if(!i)throw Error(`ENOENT: no such file or directory, lstat '${t._fullpath}'`);let a=i.isDirectory()?"tree":"blob";"blob"!==a||i.isFile()||i.isSymbolicLink()||(a="special"),t._type=a,i=j(i),t._mode=i.mode,-1===i.size&&t._actualSize&&(i.size=t._actualSize),t._stat=i}return t._stat}async content(t){if(!1===t._content){let{fs:e,dir:r,gitdir:i}=this;if(await t.type()==="tree")t._content=void 0;else{let a=await th.get({fs:e,gitdir:i}),n=await a.get("core.autocrlf"),s=await e.read(`${r}/${t._fullpath}`,{autocrlf:n});t._actualSize=s.length,t._stat&&-1===t._stat.size&&(t._stat.size=t._actualSize),t._content=new Uint8Array(s)}}return t._content}async oid(t){if(!1===t._oid){let e;let{fs:r,gitdir:i,cache:a}=this;await N.acquire({fs:r,gitdir:i,cache:a},async function(a){let n=a.entriesMap.get(t._fullpath),s=await t.stat(),o=await th.get({fs:r,gitdir:i}),l=await o.get("core.filemode"),c=void 0===w||"win32"!==w.platform;!n||O(s,n,l,c)?void 0===await t.content()?e=void 0:(e=await k(t_.wrap({type:"blob",object:await t.content()})),n&&e===n.oid&&(!l||s.mode===n.mode)&&O(s,n,l,c)&&a.insert({filepath:t._fullpath,stats:s,oid:e})):e=n.oid}),t._oid=e}return t._oid}}function eh(){let t=Object.create(null);return Object.defineProperty(t,H,{value:function({fs:t,dir:e,gitdir:r,cache:i}){return new eu({fs:t,dir:e,gitdir:r,cache:i})}}),Object.freeze(t),t}let ew=void 0===Array.prototype.flat?t=>t.reduce((t,e)=>t.concat(e),[]):t=>t.flat();class em{constructor(){this.value=null}consider(t){null!=t&&(null===this.value?this.value=t:t<this.value&&(this.value=t))}reset(){this.value=null}}async function ep({fs:t,cache:e,dir:r,gitdir:i,trees:a,map:n=async(t,e)=>e,reduce:s=async(t,e)=>{let r=ew(e);return void 0!==t&&r.unshift(t),r},iterate:o=(t,e)=>Promise.all([...e].map(t))}){let l=a.map(a=>a[H]({fs:t,dir:r,gitdir:i,cache:e})),c=Array(l.length).fill("."),f=Array.from({length:l.length-0},(t,e)=>0+e),d=async t=>{f.map(e=>{t[e]=t[e]&&new l[e].ConstructEntry(t[e])});let e=(await Promise.all(f.map(e=>t[e]?l[e].readdir(t[e]):[]))).map(t=>null===t?[]:t).map(t=>t[Symbol.iterator]());return{entries:t,children:function*(t){let e;let r=new em,i=[],a=t.length;for(let e=0;e<a;e++)i[e]=t[e].next().value,void 0!==i[e]&&r.consider(i[e]);if(null!==r.value)for(;;){let n=[];e=r.value,r.reset();for(let s=0;s<a;s++)void 0!==i[s]&&i[s]===e?(n[s]=i[s],i[s]=t[s].next().value):n[s]=null,void 0!==i[s]&&r.consider(i[s]);if(yield n,null===r.value)return}}(e)}},u=async t=>{let{entries:e,children:r}=await d(t),i=e.find(t=>t&&t._fullpath)._fullpath,a=await n(i,e);if(null!==a){let t=await o(u,r);return s(a,t=t.filter(t=>void 0!==t))}};return u(c)}async function eg(t,e){let r=await t.readdir(e);null==r?await t.rm(e):r.length?await Promise.all(r.map(r=>{let i=(0,s.join)(e,r);return t.lstat(i).then(e=>{if(e)return e.isDirectory()?eg(t,i):t.rm(i)})})).then(()=>t.rmdir(e)):await t.rmdir(e)}function ey(t){return"function"==typeof t}function eb(t){var e,r;return(r=e=(t=>{try{return t.readFile().catch(t=>t)}catch(t){return t}})(t))&&"object"==typeof r&&ey(e.then)&&ey(e.catch)}let e$=["readFile","writeFile","mkdir","rmdir","unlink","stat","lstat","readdir","readlink","symlink"];function ev(t,e){if(eb(e))for(let r of e$)t[`_${r}`]=e[r].bind(e);else for(let r of e$)t[`_${r}`]=c(e[r].bind(e));eb(e)?e.rm?t._rm=e.rm.bind(e):e.rmdir.length>1?t._rm=e.rmdir.bind(e):t._rm=eg.bind(null,t):e.rm?t._rm=c(e.rm.bind(e)):e.rmdir.length>2?t._rm=c(e.rmdir.bind(e)):t._rm=eg.bind(null,t)}class ex{constructor(t){if(void 0!==t._original_unwrapped_fs)return t;let e=Object.getOwnPropertyDescriptor(t,"promises");e&&e.enumerable?ev(this,t.promises):ev(this,t),this._original_unwrapped_fs=t}async exists(t,e={}){try{return await this._stat(t),!0}catch(t){if("ENOENT"===t.code||"ENOTDIR"===t.code)return!1;throw console.log('Unhandled error in "FileSystem.exists()" function',t),t}}async read(t,e={}){try{let r=await this._readFile(t,e);if("true"===e.autocrlf)try{r=(r=new TextDecoder("utf8",{fatal:!0}).decode(r)).replace(/\r\n/g,"\n"),r=new TextEncoder().encode(r)}catch(t){}return"string"!=typeof r&&(r=h.from(r)),r}catch(t){return null}}async write(t,e,r={}){try{await this._writeFile(t,e,r);return}catch(i){await this.mkdir(D(t)),await this._writeFile(t,e,r)}}async mkdir(t,e=!1){try{await this._mkdir(t);return}catch(r){if(null===r||"EEXIST"===r.code)return;if(e)throw r;if("ENOENT"===r.code){let e=D(t);if("."===e||"/"===e||e===t)throw r;await this.mkdir(e),await this.mkdir(t,!0)}}}async rm(t){try{await this._unlink(t)}catch(t){if("ENOENT"!==t.code)throw t}}async rmdir(t,e){try{e&&e.recursive?await this._rm(t,e):await this._rmdir(t)}catch(t){if("ENOENT"!==t.code)throw t}}async readdir(t){try{let e=await this._readdir(t);return e.sort($),e}catch(t){if("ENOTDIR"===t.code)return null;return[]}}async readdirDeep(t){let e=await this._readdir(t);return(await Promise.all(e.map(async e=>{let r=t+"/"+e;return(await this._stat(r)).isDirectory()?this.readdirDeep(r):r}))).reduce((t,e)=>t.concat(e),[])}async lstat(t){try{return await this._lstat(t)}catch(t){if("ENOENT"===t.code)return null;throw t}}async readlink(t,e={encoding:"buffer"}){try{let r=await this._readlink(t,e);return h.isBuffer(r)?r:h.from(r)}catch(t){if("ENOENT"===t.code)return null;throw t}}async writelink(t,e){return this._symlink(e.toString("utf8"),t)}}function e_(t,e){if(void 0===e)throw new t1(t)}async function ej(t,e){return(!!t||!!e)&&(!!t&&!e||!t&&!!e||(await t.type()!=="tree"||await e.type()!=="tree")&&(await t.type()!==await e.type()||await t.mode()!==await e.mode()||await t.oid()!==await e.oid()))}async function eE({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),commit:i="HEAD",cache:a={}}){try{e_("fs",t),e_("dir",e),e_("gitdir",r);let n=new ex(t),s=[ed({ref:i}),eh(),z()],o=[];await N.acquire({fs:n,gitdir:r,cache:a},async function(t){o=t.unmergedPaths});let l=await ep({fs:n,cache:a,dir:e,gitdir:r,trees:s,map:async function(t,[e,r,i]){let a=!await ej(r,i),n=o.includes(t),s=!await ej(i,e);if(a||n)return e?{path:t,mode:await e.mode(),oid:await e.oid(),type:await e.type(),content:await e.content()}:void 0;if(s)return!1;throw new et(t)}});await N.acquire({fs:n,gitdir:r,cache:a},async function(t){for(let r of l)if(!1!==r){if(!r){await n.rmdir(`${e}/${r.path}`,{recursive:!0}),t.delete({filepath:r.path});continue}if("blob"===r.type){let i=new TextDecoder().decode(r.content);await n.write(`${e}/${r.path}`,i,{mode:r.mode}),t.insert({filepath:r.path,oid:r.oid,stage:0})}}})}catch(t){throw t.caller="git.abortMerge",t}}class ek{static async isIgnored({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),filepath:i}){if(".git"===B(i))return!0;if("."===i)return!1;let a="",n=(0,s.join)(r,"info","exclude");await t.exists(n)&&(a=await t.read(n,"utf8"));let o=[{gitignore:(0,s.join)(e,".gitignore"),filepath:i}],l=i.split("/").filter(Boolean);for(let t=1;t<l.length;t++){let r=l.slice(0,t).join("/"),i=l.slice(t).join("/");o.push({gitignore:(0,s.join)(e,r,".gitignore"),filepath:i})}let c=!1;for(let e of o){let r;try{r=await t.read(e.gitignore,"utf8")}catch(t){if("NOENT"===t.code)continue}let i=f().add(a);i.add(r);let n=D(e.filepath);if("."!==n&&i.ignores(n))return!0;c=c?!i.test(e.filepath).unignored:i.test(e.filepath).ignored}return c}}async function eS({fs:t,gitdir:e,object:r,format:i,oid:a}){if("deflated"!==i)throw new g("GitObjectStoreLoose expects objects to write to be in deflated format");let n=`objects/${a.slice(0,2)}/${a.slice(2)}`,s=`${e}/${n}`;await t.exists(s)||await t.write(s,r)}let eR=null;async function eI(t){return null===eR&&(eR=function(){try{return new CompressionStream("deflate").writable.close(),new Blob([]).stream().cancel(),!0}catch(t){return!1}}()),eR?eO(t):l.deflate(t)}async function eO(t){let e=new CompressionStream("deflate"),r=new Blob([t]).stream().pipeThrough(e);return new Uint8Array(await new Response(r).arrayBuffer())}async function eP({fs:t,gitdir:e,type:r,object:i,format:a="content",oid:n,dryRun:s=!1}){return"deflated"!==a&&("wrapped"!==a&&(i=t_.wrap({type:r,object:i})),n=await k(i),i=h.from(await eI(i))),s||await eS({fs:t,gitdir:e,object:i,format:"deflated",oid:n}),n}function eA(t){let e;for(;~(e=t.indexOf(92));)t[e]=47;return t}async function eC({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),filepath:i,cache:a={},force:n=!1,parallel:o=!0}){try{e_("fs",t),e_("dir",e),e_("gitdir",r),e_("filepath",i);let s=new ex(t);await N.acquire({fs:s,gitdir:r,cache:a},async t=>eU({dir:e,gitdir:r,fs:s,filepath:i,index:t,force:n,parallel:o}))}catch(t){throw t.caller="git.add",t}}async function eU({dir:t,gitdir:e,fs:r,filepath:i,index:a,force:n,parallel:o}){let l=(i=Array.isArray(i)?i:[i]).map(async i=>{if(!n&&await ek.isIgnored({fs:r,dir:t,gitdir:e,filepath:i}))return;let l=await r.lstat((0,s.join)(t,i));if(!l)throw new W(i);if(l.isDirectory()){let l=await r.readdir((0,s.join)(t,i));if(o){let c=l.map(l=>eU({dir:t,gitdir:e,fs:r,filepath:[(0,s.join)(i,l)],index:a,force:n,parallel:o}));await Promise.all(c)}else for(let c of l)await eU({dir:t,gitdir:e,fs:r,filepath:[(0,s.join)(i,c)],index:a,force:n,parallel:o})}else{let n=await th.get({fs:r,gitdir:e}),o=await n.get("core.autocrlf"),c=l.isSymbolicLink()?await r.readlink((0,s.join)(t,i)).then(eA):await r.read((0,s.join)(t,i),{autocrlf:o});if(null===c)throw new W(i);let f=await eP({fs:r,gitdir:e,type:"blob",object:c});a.insert({filepath:i,stats:l,oid:f})}}),c=await Promise.allSettled(l),f=c.filter(t=>"rejected"===t.status).map(t=>t.reason);if(f.length>1)throw new t2(f);if(1===f.length)throw f[0];return c.filter(t=>"fulfilled"===t.status&&t.value).map(t=>t.value)}async function eN({fs:t,gitdir:e,path:r}){return(await th.get({fs:t,gitdir:e})).get(r)}function eB(t,...e){for(let r of e)if(r)for(let e of Object.keys(r)){let i=r[e];void 0!==i&&(t[e]=i)}return t}async function eD({fs:t,gitdir:e,author:r,commit:i}){let a=Math.floor(Date.now()/1e3),n=eB({},{name:await eN({fs:t,gitdir:e,path:"user.name"}),email:await eN({fs:t,gitdir:e,path:"user.email"})||"",timestamp:a,timezoneOffset:new Date(1e3*a).getTimezoneOffset()},i?i.author:void 0,r);if(void 0!==n.name)return n}async function eM({fs:t,gitdir:e,author:r,committer:i,commit:a}){let n=Math.floor(Date.now()/1e3),s=eB({},{name:await eN({fs:t,gitdir:e,path:"user.name"}),email:await eN({fs:t,gitdir:e,path:"user.email"})||"",timestamp:n,timezoneOffset:new Date(1e3*n).getTimezoneOffset()},a?a.committer:void 0,r,i);if(void 0!==s.name)return s}async function eT({fs:t,cache:e,gitdir:r,oid:i}){let{type:a,object:n}=await tH({fs:t,cache:e,gitdir:r,oid:i});if("tag"===a)return eT({fs:t,cache:e,gitdir:r,oid:i=es.from(n).parse().object});if("commit"!==a)throw new F(i,a,"commit");return{commit:el.from(n),oid:i}}async function eH({fs:t,cache:e,gitdir:r,oid:i}){let{commit:a,oid:n}=await eT({fs:t,cache:e,gitdir:r,oid:i});return{oid:n,commit:a.parse(),payload:a.withoutSignature()}}async function ez({fs:t,cache:e,onSign:r,gitdir:i,message:a,author:n,committer:s,signingKey:o,amend:l=!1,dryRun:c=!1,noUpdateBranch:f=!1,ref:d,parent:u,tree:h}){let w,m,p=!1;d||(d=await tg.resolve({fs:t,gitdir:i,ref:"HEAD",depth:2}));try{w=await tg.resolve({fs:t,gitdir:i,ref:d}),m=await eH({fs:t,gitdir:i,oid:w,cache:{}})}catch{p=!0}if(l&&p)throw new ee(d);let g=l?await eD({fs:t,gitdir:i,author:n,commit:m.commit}):await eD({fs:t,gitdir:i,author:n});if(!g)throw new t0("author");let y=l?await eM({fs:t,gitdir:i,author:g,committer:s,commit:m.commit}):await eM({fs:t,gitdir:i,author:g,committer:s});if(!y)throw new t0("committer");return N.acquire({fs:t,gitdir:i,cache:e,allowUnmerged:!1},async function(e){let n=M(e.entries).get(".");if(h||(h=await eW({fs:t,gitdir:i,inode:n,dryRun:c})),u=u?await Promise.all(u.map(e=>tg.resolve({fs:t,gitdir:i,ref:e}))):l?m.commit.parent:w?[w]:[],!a){if(l)a=m.commit.message;else throw new t1("message")}let s=el.from({tree:h,parent:u,author:g,committer:y,message:a});o&&(s=await el.sign(s,r,o));let p=await eP({fs:t,gitdir:i,type:"commit",object:s.toObject(),dryRun:c});return f||c||await tg.writeRef({fs:t,gitdir:i,ref:d,value:p}),p})}async function eW({fs:t,gitdir:e,inode:r,dryRun:i}){let a=r.children;for(let r of a)"tree"===r.type&&(r.metadata.mode="040000",r.metadata.oid=await eW({fs:t,gitdir:e,inode:r,dryRun:i}));let n=a.map(t=>({mode:t.metadata.mode,path:t.basename,oid:t.metadata.oid,type:t.type})),s=tx.from(n);return await eP({fs:t,gitdir:e,type:"tree",object:s.toObject(),dryRun:i})}async function eF({fs:t,cache:e,gitdir:r,oid:i,filepath:a}){if(a.startsWith("/"))throw new tZ("leading-slash");if(a.endsWith("/"))throw new tZ("trailing-slash");let n=i,s=await ec({fs:t,cache:e,gitdir:r,oid:i}),o=s.tree;if(""===a)i=s.oid;else{let s=a.split("/");i=await eG({fs:t,cache:e,gitdir:r,tree:o,pathArray:s,oid:n,filepath:a})}return i}async function eG({fs:t,cache:e,gitdir:r,tree:i,pathArray:a,oid:n,filepath:s}){let o=a.shift();for(let l of i)if(l.path===o){if(0===a.length)return l.oid;{let{type:o,object:c}=await tH({fs:t,cache:e,gitdir:r,oid:l.oid});if("tree"!==o)throw new F(n,o,"tree",s);return eG({fs:t,cache:e,gitdir:r,tree:i=tx.from(c),pathArray:a,oid:n,filepath:s})}}throw new W(`file or directory found at "${n}:${s}"`)}async function eq({fs:t,cache:e,gitdir:r,oid:i,filepath:a}){void 0!==a&&(i=await eF({fs:t,cache:e,gitdir:r,oid:i,filepath:a}));let{tree:n,oid:s}=await ec({fs:t,cache:e,gitdir:r,oid:i});return{oid:s,tree:n.entries()}}async function eL({fs:t,gitdir:e,tree:r}){let i=tx.from(r).toObject();return await eP({fs:t,gitdir:e,type:"tree",object:i,format:"content"})}async function eV({fs:t,cache:e,onSign:r,gitdir:i,ref:a,oid:n,note:s,force:o,author:l,committer:c,signingKey:f}){let d;try{d=await tg.resolve({gitdir:i,fs:t,ref:a})}catch(t){if(!(t instanceof W))throw t}let u=(await eq({fs:t,cache:e,gitdir:i,oid:d||"4b825dc642cb6eb9a060e54bf8d69288fbee4904"})).tree;if(o)u=u.filter(t=>t.path!==n);else for(let t of u)if(t.path===n)throw new tz("note",n);"string"==typeof s&&(s=h.from(s,"utf8"));let w=await eP({fs:t,gitdir:i,type:"blob",object:s,format:"content"});u.push({mode:"100644",path:n,oid:w,type:"blob"});let m=await eL({fs:t,gitdir:i,tree:u});return await ez({fs:t,cache:e,onSign:r,gitdir:i,ref:a,tree:m,parent:d&&[d],message:`Note added by 'isomorphic-git addNote'
`,author:l,committer:c,signingKey:f})}async function eK({fs:t,onSign:e,dir:r,gitdir:i=(0,s.join)(r,".git"),ref:a="refs/notes/commits",oid:n,note:o,force:l,author:c,committer:f,signingKey:d,cache:u={}}){try{e_("fs",t),e_("gitdir",i),e_("oid",n),e_("note",o),d&&e_("onSign",e);let r=new ex(t),s=await eD({fs:r,gitdir:i,author:c});if(!s)throw new t0("author");let h=await eM({fs:r,gitdir:i,author:s,committer:f});if(!h)throw new t0("committer");return await eV({fs:new ex(r),cache:u,onSign:e,gitdir:i,ref:a,oid:n,note:o,force:l,author:s,committer:h,signingKey:d})}catch(t){throw t.caller="git.addNote",t}}async function eZ({fs:t,gitdir:e,remote:r,url:i,force:a}){if(r!==d.clean(r))throw new tY(r,d.clean(r));let n=await th.get({fs:t,gitdir:e});if(!a&&(await n.getSubsections("remote")).includes(r)&&i!==await n.get(`remote.${r}.url`))throw new tz("remote",r);await n.set(`remote.${r}.url`,i),await n.set(`remote.${r}.fetch`,`+refs/heads/*:refs/remotes/${r}/*`),await th.save({fs:t,gitdir:e,config:n})}async function eY({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),remote:i,url:a,force:n=!1}){try{return e_("fs",t),e_("gitdir",r),e_("remote",i),e_("url",a),await eZ({fs:new ex(t),gitdir:r,remote:i,url:a,force:n})}catch(t){throw t.caller="git.addRemote",t}}async function eJ({fs:t,cache:e,onSign:r,gitdir:i,ref:a,tagger:n,message:s=a,gpgsig:o,object:l,signingKey:c,force:f=!1}){if(a=a.startsWith("refs/tags/")?a:`refs/tags/${a}`,!f&&await tg.exists({fs:t,gitdir:i,ref:a}))throw new tz("tag",a);let d=await tg.resolve({fs:t,gitdir:i,ref:l||"HEAD"}),{type:u}=await tH({fs:t,cache:e,gitdir:i,oid:d}),h=es.from({object:d,type:u,tag:a.replace("refs/tags/",""),tagger:n,message:s,gpgsig:o});c&&(h=await es.sign(h,r,c));let w=await eP({fs:t,gitdir:i,type:"tag",object:h.toObject()});await tg.writeRef({fs:t,gitdir:i,ref:a,value:w})}async function eX({fs:t,onSign:e,dir:r,gitdir:i=(0,s.join)(r,".git"),ref:a,tagger:n,message:o=a,gpgsig:l,object:c,signingKey:f,force:d=!1,cache:u={}}){try{e_("fs",t),e_("gitdir",i),e_("ref",a),f&&e_("onSign",e);let r=new ex(t),s=await eD({fs:r,gitdir:i,author:n});if(!s)throw new t0("tagger");return await eJ({fs:r,cache:u,onSign:e,gitdir:i,ref:a,tagger:s,message:o,gpgsig:l,object:c,signingKey:f,force:d})}catch(t){throw t.caller="git.annotatedTag",t}}async function eQ({fs:t,gitdir:e,ref:r,object:i,checkout:a=!1,force:n=!1}){let s;if(r!==d.clean(r))throw new tY(r,d.clean(r));let o=`refs/heads/${r}`;if(!n&&await tg.exists({fs:t,gitdir:e,ref:o}))throw new tz("branch",r,!1);try{s=await tg.resolve({fs:t,gitdir:e,ref:i||"HEAD"})}catch(t){}s&&await tg.writeRef({fs:t,gitdir:e,ref:o,value:s}),a&&await tg.writeSymbolicRef({fs:t,gitdir:e,ref:"HEAD",value:o})}async function e0({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i,object:a,checkout:n=!1,force:o=!1}){try{return e_("fs",t),e_("gitdir",r),e_("ref",i),await eQ({fs:new ex(t),gitdir:r,ref:i,object:a,checkout:n,force:o})}catch(t){throw t.caller="git.branch",t}}let e1=(t,e)=>"."===t||null==e||0===e.length||"."===e||(e.length>=t.length?e.startsWith(t):t.startsWith(e));async function e2({fs:t,cache:e,onProgress:r,onPostCheckout:i,dir:a,gitdir:n,remote:s,ref:o,filepaths:l,noCheckout:c,noUpdateHead:f,dryRun:d,force:u,track:h=!0}){let w,m;if(i)try{w=await tg.resolve({fs:t,gitdir:n,ref:"HEAD"})}catch(t){w="0000000000000000000000000000000000000000"}try{m=await tg.resolve({fs:t,gitdir:n,ref:o})}catch(r){if("HEAD"===o)throw r;let e=`${s}/${o}`;if(m=await tg.resolve({fs:t,gitdir:n,ref:e}),h){let e=await th.get({fs:t,gitdir:n});await e.set(`branch.${o}.remote`,s),await e.set(`branch.${o}.merge`,`refs/heads/${o}`),await th.save({fs:t,gitdir:n,config:e})}await tg.writeRef({fs:t,gitdir:n,ref:`refs/heads/${o}`,value:m})}if(!c){let s;try{s=await e8({fs:t,cache:e,onProgress:r,dir:a,gitdir:n,ref:o,force:u,filepaths:l})}catch(t){if(t instanceof W&&t.data.what===m)throw new tG(o,m);throw t}let c=s.filter(([t])=>"conflict"===t).map(([t,e])=>e);if(c.length>0)throw new tF(c);let f=s.filter(([t])=>"error"===t).map(([t,e])=>e);if(f.length>0)throw new g(f.join(", "));if(d){i&&await i({previousHead:w,newHead:m,type:null!=l&&l.length>0?"file":"branch"});return}let h=0,p=s.length;await N.acquire({fs:t,gitdir:n,cache:e},async function(e){await Promise.all(s.filter(([t])=>"delete"===t||"delete-index"===t).map(async function([i,n]){let s=`${a}/${n}`;"delete"===i&&await t.rm(s),e.delete({filepath:n}),r&&await r({phase:"Updating workdir",loaded:++h,total:p})}))}),await N.acquire({fs:t,gitdir:n,cache:e},async function(e){for(let[i,n]of s)if("rmdir"===i||"rmdir-index"===i){let s=`${a}/${n}`;try{"rmdir-index"===i&&e.delete({filepath:n}),await t.rmdir(s),r&&await r({phase:"Updating workdir",loaded:++h,total:p})}catch(t){if("ENOTEMPTY"===t.code)console.log(`Did not delete ${n} because directory is not empty`);else throw t}}}),await Promise.all(s.filter(([t])=>"mkdir"===t||"mkdir-index"===t).map(async function([e,i]){let n=`${a}/${i}`;await t.mkdir(n),r&&await r({phase:"Updating workdir",loaded:++h,total:p})})),await N.acquire({fs:t,gitdir:n,cache:e},async function(i){await Promise.all(s.filter(([t])=>"create"===t||"create-index"===t||"update"===t||"mkdir-index"===t).map(async function([s,o,l,c,f]){let d=`${a}/${o}`;try{if("create-index"!==s&&"mkdir-index"!==s){let{object:r}=await tH({fs:t,cache:e,gitdir:n,oid:l});if(f&&await t.rm(d),33188===c)await t.write(d,r);else if(33261===c)await t.write(d,r,{mode:511});else if(40960===c)await t.writelink(d,r);else throw new g(`Invalid mode 0o${c.toString(8)} detected in blob ${l}`)}let a=await t.lstat(d);33261===c&&(a.mode=493),"mkdir-index"===s&&(a.mode=57344),i.insert({filepath:o,stats:a,oid:l}),r&&await r({phase:"Updating workdir",loaded:++h,total:p})}catch(t){console.log(t)}}))}),i&&await i({previousHead:w,newHead:m,type:null!=l&&l.length>0?"file":"branch"})}if(!f){let e=await tg.expand({fs:t,gitdir:n,ref:o});e.startsWith("refs/heads")?await tg.writeSymbolicRef({fs:t,gitdir:n,ref:"HEAD",value:e}):await tg.writeRef({fs:t,gitdir:n,ref:"HEAD",value:m})}}async function e8({fs:t,cache:e,onProgress:r,dir:i,gitdir:a,ref:n,force:s,filepaths:o}){let l=0;return ep({fs:t,cache:e,dir:i,gitdir:a,trees:[ed({ref:n}),eh(),z()],map:async function(t,[e,i,a]){if("."!==t){if(o&&!o.some(e=>e1(t,e)))return null;switch(r&&await r({phase:"Analyzing workdir",loaded:++l}),[!!a,!!e,!!i].map(Number).join("")){case"000":return;case"001":if(s&&o&&o.includes(t))return["delete",t];return;case"010":switch(await e.type()){case"tree":return["mkdir",t];case"blob":return["create",t,await e.oid(),await e.mode()];case"commit":return["mkdir-index",t,await e.oid(),await e.mode()];default:return["error",`new entry Unhandled type ${await e.type()}`]}case"011":switch(`${await e.type()}-${await i.type()}`){case"tree-tree":case"commit-tree":return;case"tree-blob":case"blob-tree":case"commit-blob":return["conflict",t];case"blob-blob":if(await e.oid()!==await i.oid()){if(s)return["update",t,await e.oid(),await e.mode(),await e.mode()!==await i.mode()];return["conflict",t]}if(await e.mode()===await i.mode())return["create-index",t,await e.oid(),await e.mode()];if(s)return["update",t,await e.oid(),await e.mode(),!0];return["conflict",t];default:return["error",`new entry Unhandled type ${e.type}`]}case"100":return["delete-index",t];case"101":switch(await a.type()){case"tree":return["rmdir",t];case"blob":if(await a.oid()===await i.oid()||s)return["delete",t];return["conflict",t];case"commit":return["rmdir-index",t];default:return["error",`delete entry Unhandled type ${await a.type()}`]}case"110":case"111":switch(`${await a.type()}-${await e.type()}`){case"tree-tree":return;case"blob-blob":if(await a.oid()===await e.oid()&&await a.mode()===await e.mode()&&!s)return;if(i){if(await i.oid()!==await a.oid()&&await i.oid()!==await e.oid()){if(s)return["update",t,await e.oid(),await e.mode(),await e.mode()!==await i.mode()];return["conflict",t]}}else if(s)return["update",t,await e.oid(),await e.mode(),await e.mode()!==await a.mode()];if(await e.mode()!==await a.mode())return["update",t,await e.oid(),await e.mode(),!0];if(await e.oid()!==await a.oid())return["update",t,await e.oid(),await e.mode(),!1];return;case"tree-blob":return["update-dir-to-blob",t,await e.oid()];case"blob-tree":return["update-blob-to-tree",t];case"commit-commit":return["mkdir-index",t,await e.oid(),await e.mode()];default:return["error",`update entry Unhandled type ${await a.type()}-${await e.type()}`]}}}},reduce:async function(t,e){return e=ew(e),t&&(t&&"rmdir"===t[0]?e.push(t):e.unshift(t)),e}})}async function e4({fs:t,onProgress:e,onPostCheckout:r,dir:i,gitdir:a=(0,s.join)(i,".git"),remote:n="origin",ref:o,filepaths:l,noCheckout:c=!1,noUpdateHead:f=void 0===o,dryRun:d=!1,force:u=!1,track:h=!0,cache:w={}}){try{return e_("fs",t),e_("dir",i),e_("gitdir",a),await e2({fs:new ex(t),cache:w,onProgress:e,onPostCheckout:r,dir:i,gitdir:a,remote:n,ref:o||"HEAD",filepaths:l,noCheckout:c,noUpdateHead:f,dryRun:d,force:u,track:h})}catch(t){throw t.caller="git.checkout",t}}let e3=RegExp("^refs/(heads/|tags/|remotes/)?(.*)");function e6(t){let e=e3.exec(t);return e?"remotes/"===e[1]&&t.endsWith("/HEAD")?e[2].slice(0,-5):e[2]:t}async function e5({fs:t,gitdir:e,fullname:r=!1,test:i=!1}){let a=await tg.resolve({fs:t,gitdir:e,ref:"HEAD",depth:2});if(i)try{await tg.resolve({fs:t,gitdir:e,ref:a})}catch(t){return}if(a.startsWith("refs/"))return r?a:e6(a)}function e9({username:t="",password:e=""}){return`Basic ${h.from(`${t}:${e}`).toString("base64")}`}async function e7(t,e){let r=tR(t);for(;;){let{value:t,done:i}=await r.next();if(t&&await e(t),i)break}r.return&&r.return()}async function rt(t){let e=0,r=[];await e7(t,t=>{r.push(t),e+=t.byteLength});let i=new Uint8Array(e),a=0;for(let t of r)i.set(t,a),a+=t.byteLength;return i}function re(t){let e=t.match(/^https?:\/\/([^/]+)@/);if(null==e)return{url:t,auth:{}};let[r,i]=(e=e[1]).split(":");return{url:t=t.replace(`${e}@`,""),auth:{username:r,password:i}}}function rr(t,e){let r=e.toString(16);return"0".repeat(t-r.length)+r}class ri{static flush(){return h.from("0000","utf8")}static delim(){return h.from("0001","utf8")}static encode(t){"string"==typeof t&&(t=h.from(t));let e=rr(4,t.length+4);return h.concat([h.from(e,"utf8"),t])}static streamReader(t){let e=new tI(t);return async function(){try{let t=await e.read(4);if(null==t)return!0;if(t=parseInt(t.toString("utf8"),16),0===t||1===t)return null;let r=await e.read(t-4);if(null==r)return!0;return r}catch(e){return t.error=e,!0}}}}async function ra(t){let e;let r={};for(;!0!==(e=await t());){if(null===e)continue;let t=(e=e.toString("utf8").replace(/\n$/,"")).indexOf("=");if(t>-1){let i=e.slice(0,t),a=e.slice(t+1);r[i]=a}else r[e]=!0}return{protocolVersion:2,capabilities2:r}}async function rn(t,{service:e}){let r=new Set,i=new Map,a=new Map,n=ri.streamReader(t),s=await n();for(;null===s;)s=await n();if(!0===s)throw new tq;if(s.includes("version 2"))return ra(n);if(s.toString("utf8").replace(/\n$/,"")!==`# service=${e}`)throw new t8(`# service=${e}\\n`,s.toString("utf8"));let o=await n();for(;null===o;)o=await n();if(!0===o)return{capabilities:r,refs:i,symrefs:a};if((o=o.toString("utf8")).includes("version 2"))return ra(n);let[l,c]=rs(o,"\0","\\x00");if(c.split(" ").map(t=>r.add(t)),"0000000000000000000000000000000000000000 capabilities^{}"!==l){let[t,e]=rs(l," "," ");for(i.set(e,t);;){let t=await n();if(!0===t)break;if(null!==t){let[e,r]=rs(t.toString("utf8")," "," ");i.set(r,e)}}}for(let t of r)if(t.startsWith("symref=")){let e=t.match(/symref=([^:]+):(.*)/);3===e.length&&a.set(e[1],e[2])}return{protocolVersion:1,capabilities:r,refs:i,symrefs:a}}function rs(t,e,r){let i=t.trim().split(e);if(2!==i.length)throw new t8(`Two strings separated by '${r}'`,t.toString("utf8"));return i}let ro=(t,e)=>t.endsWith("?")?`${t}${e}`:`${t}/${e.replace(/^https?:\/\//,"")}`,rl=(t,e)=>{(e.username||e.password)&&(t.Authorization=e9(e)),e.headers&&Object.assign(t,e.headers)},rc=async t=>{try{let e=h.from(await rt(t.body)),r=e.toString("utf8");return{preview:r.length<256?r:r.slice(0,256)+"...",response:r,data:e}}catch(t){return{}}};class rf{static async capabilities(){return["discover","connect"]}static async discover({http:t,onProgress:e,onAuth:r,onAuthSuccess:i,onAuthFailure:a,corsProxy:n,service:s,url:o,headers:l,protocolVersion:c}){let f,d,{url:u,auth:h}=re(o),w=n?ro(n,u):u;(h.username||h.password)&&(l.Authorization=e9(h)),2===c&&(l["Git-Protocol"]="version=2");let m=!1;do if(f=await t.request({onProgress:e,method:"GET",url:`${w}/info/refs?service=${s}`,headers:l}),d=!1,401===f.statusCode||203===f.statusCode){let t=m?a:r;if(t){if((h=await t(u,{...h,headers:{...l}}))&&h.cancel)throw new t7;h&&(rl(l,h),m=!0,d=!0)}}else 200===f.statusCode&&m&&i&&await i(u,h);while(d);if(200!==f.statusCode){let{response:t}=await rc(f);throw new tK(f.statusCode,f.statusMessage,t)}if(f.headers["content-type"]===`application/x-${s}-advertisement`){let t=await rn(f.body,{service:s});return t.auth=h,t}{let{preview:t,response:e,data:r}=await rc(f);try{let t=await rn([r],{service:s});return t.auth=h,t}catch(r){throw new t6(t,e)}}}static async connect({http:t,onProgress:e,corsProxy:r,service:i,url:a,auth:n,body:s,headers:o}){let l=re(a);l&&(a=l.url),r&&(a=ro(r,a)),o["content-type"]=`application/x-${i}-request`,o.accept=`application/x-${i}-result`,rl(o,n);let c=await t.request({onProgress:e,method:"POST",url:`${a}/${i}`,body:s,headers:o});if(200!==c.statusCode){let{response:t}=rc(c);throw new tK(c.statusCode,c.statusMessage,t)}return c}}class rd{static getRemoteHelperFor({url:t}){let e=new Map;e.set("http",rf),e.set("https",rf);let r=function({url:t}){if(t.startsWith("git@"))return{transport:"ssh",address:t};let e=t.match(/(\w+)(:\/\/|::)(.*)/);if(null!==e){if("://"===e[2])return{transport:e[1],address:e[0]};if("::"===e[2])return{transport:e[1],address:e[3]}}}({url:t});if(!r)throw new t9(t);if(e.has(r.transport))return e.get(r.transport);throw new t5(t,r.transport,"ssh"===r.transport?t.replace(/^git@([^:]+):/,"https://$1/").replace(/^ssh:\/\//,"https://"):void 0)}}let ru=null;class rh{static async read({fs:t,gitdir:e}){null===ru&&(ru=new a);let r=(0,s.join)(e,"shallow"),i=new Set;return await ru.acquire(r,async function(){let e=await t.read(r,{encoding:"utf8"});if(null===e||""===e.trim())return i;e.trim().split("\n").map(t=>i.add(t))}),i}static async write({fs:t,gitdir:e,oids:r}){null===ru&&(ru=new a);let i=(0,s.join)(e,"shallow");if(r.size>0){let e=[...r].join("\n")+"\n";await ru.acquire(i,async function(){await t.write(i,e,{encoding:"utf8"})})}else await ru.acquire(i,async function(){await t.rm(i)})}}async function rw({fs:t,gitdir:e,oid:r}){let i=`objects/${r.slice(0,2)}/${r.slice(2)}`;return t.exists(`${e}/${i}`)}async function rm({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:a}){let n=await t.readdir((0,s.join)(r,"objects/pack"));for(let s of n=n.filter(t=>t.endsWith(".idx"))){let n=`${r}/objects/pack/${s}`,o=await tM({fs:t,cache:e,filename:n,getExternalRefDelta:a});if(o.error)throw new g(o.error);if(o.offsets.has(i))return!0}return!1}async function rp({fs:t,cache:e,gitdir:r,oid:i,format:a="content"}){let n=await rw({fs:t,gitdir:r,oid:i});return n||(n=await rm({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:i=>tH({fs:t,cache:e,gitdir:r,oid:i})})),n}function rg(t,e){let r=t.map(t=>t.split("=",1)[0]);return e.filter(t=>{let e=t.split("=",1)[0];return r.includes(e)})}let ry={version:"1.27.2",agent:"git/isomorphic-git@1.27.2"};class rb{constructor(){this._queue=[]}write(t){if(this._ended)throw Error("You cannot write to a FIFO that has already been ended!");if(this._waiting){let e=this._waiting;this._waiting=null,e({value:t})}else this._queue.push(t)}end(){if(this._ended=!0,this._waiting){let t=this._waiting;this._waiting=null,t({done:!0})}}destroy(t){this.error=t,this.end()}async next(){if(this._queue.length>0)return{value:this._queue.shift()};if(this._ended)return{done:!0};if(this._waiting)throw Error("You cannot call read until the previous call to read has returned!");return new Promise(t=>{this._waiting=t})}}function r$(t){let e=new rb,r="";return(async()=>{await e7(t,t=>{for(t=t.toString("utf8"),r+=t;;){let t=function(t){let e=t.indexOf("\r"),r=t.indexOf("\n");return -1===e&&-1===r?-1:-1===e?r+1:-1===r?e+1:r===e+1?r+1:Math.min(e,r)+1}(r);if(-1===t)break;e.write(r.slice(0,t)),r=r.slice(t)}}),r.length>0&&e.write(r),e.end()})(),e}class rv{static demux(t){let e=ri.streamReader(t),r=new rb,i=new rb,a=new rb,n=async function(){let s=await e();if(null===s)return n();if(!0===s){r.end(),a.end(),t.error?i.destroy(t.error):i.end();return}switch(s[0]){case 1:i.write(s.slice(1));break;case 2:a.write(s.slice(1));break;case 3:{let t=s.slice(1);a.write(t),r.end(),a.end(),i.destroy(Error(t.toString("utf8")));return}default:r.write(s)}n()};return n(),{packetlines:r,packfile:i,progress:a}}}async function rx(t){let{packetlines:e,packfile:r,progress:i}=rv.demux(t),a=[],n=[],s=[],o=!1,l=!1;return new Promise((c,f)=>{e7(e,e=>{let d=e.toString("utf8").trim();if(d.startsWith("shallow")){let t=d.slice(-41).trim();40!==t.length&&f(new G(t)),a.push(t)}else if(d.startsWith("unshallow")){let t=d.slice(-41).trim();40!==t.length&&f(new G(t)),n.push(t)}else if(d.startsWith("ACK")){let[,t,e]=d.split(" ");s.push({oid:t,status:e}),e||(l=!0)}else d.startsWith("NAK")?(o=!0,l=!0):(l=!0,o=!0);l&&(t.error?f(t.error):c({shallows:a,unshallows:n,acks:s,nak:o,packfile:r,progress:i}))}).finally(()=>{l||(t.error?f(t.error):c({shallows:a,unshallows:n,acks:s,nak:o,packfile:r,progress:i}))})})}async function r_({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:o,onAuthFailure:l,gitdir:c,ref:f,remoteRef:d,remote:u,url:w,corsProxy:m,depth:p=null,since:g=null,exclude:y=[],relative:b=!1,tags:$=!1,singleBranch:v=!1,headers:x={},prune:_=!1,pruneTags:j=!1}){let E=f||await e5({fs:t,gitdir:c,test:!0}),k=await th.get({fs:t,gitdir:c}),S=u||E&&await k.get(`branch.${E}.remote`)||"origin",R=w||await k.get(`remote.${S}.url`);if(void 0===R)throw new t1("remote OR url");let I=d||E&&await k.get(`branch.${E}.merge`)||f||"HEAD";void 0===m&&(m=await k.get("http.corsProxy"));let O=rd.getRemoteHelperFor({url:R}),P=await O.discover({http:r,onAuth:n,onAuthSuccess:o,onAuthFailure:l,corsProxy:m,service:"git-upload-pack",url:R,headers:x,protocolVersion:1}),A=P.auth,C=P.refs;if(0===C.size)return{defaultBranch:null,fetchHead:null,fetchHeadDescription:null};if(null!==p&&!P.capabilities.has("shallow"))throw new t3("shallow","depth");if(null!==g&&!P.capabilities.has("deepen-since"))throw new t3("deepen-since","since");if(y.length>0&&!P.capabilities.has("deepen-not"))throw new t3("deepen-not","exclude");if(!0===b&&!P.capabilities.has("deepen-relative"))throw new t3("deepen-relative","relative");let{oid:U,fullref:N}=tg.resolveAgainstMap({ref:I,map:C});for(let t of C.keys())t===N||"HEAD"===t||t.startsWith("refs/heads/")||$&&t.startsWith("refs/tags/")||C.delete(t);let B=rg([...P.capabilities],["multi_ack_detailed","no-done","side-band-64k","ofs-delta",`agent=${ry.agent}`]);b&&B.push("deepen-relative");let D=v?[U]:C.values(),M=v?[E]:await tg.listRefs({fs:t,gitdir:c,filepath:"refs"}),T=[];for(let r of M)try{r=await tg.expand({fs:t,gitdir:c,ref:r});let i=await tg.resolve({fs:t,gitdir:c,ref:r});await rp({fs:t,cache:e,gitdir:c,oid:i})&&T.push(i)}catch(t){}T=[...new Set(T)];let H=await rh.read({fs:t,gitdir:c}),z=function({capabilities:t=[],wants:e=[],haves:r=[],shallows:i=[],depth:a=null,since:n=null,exclude:s=[]}){let o=[];e=[...new Set(e)];let l=` ${t.join(" ")}`;for(let t of e)o.push(ri.encode(`want ${t}${l}
`)),l="";for(let t of i)o.push(ri.encode(`shallow ${t}
`));for(let t of(null!==a&&o.push(ri.encode(`deepen ${a}
`)),null!==n&&o.push(ri.encode(`deepen-since ${Math.floor(n.valueOf()/1e3)}
`)),s))o.push(ri.encode(`deepen-not ${t}
`));for(let t of(o.push(ri.flush()),r))o.push(ri.encode(`have ${t}
`));return o.push(ri.encode(`done
`)),o}({capabilities:B,wants:D,haves:T,shallows:P.capabilities.has("shallow")?[...H]:[],depth:p,since:g,exclude:y}),W=h.from(await rt(z)),F=await O.connect({http:r,onProgress:i,corsProxy:m,service:"git-upload-pack",url:R,auth:A,body:[W],headers:x}),G=await rx(F.body);for(let r of(F.headers&&(G.headers=F.headers),G.shallows))if(!H.has(r))try{let{object:i}=await tH({fs:t,cache:e,gitdir:c,oid:r}),a=new el(i),n=await Promise.all(a.headers().parent.map(r=>rp({fs:t,cache:e,gitdir:c,oid:r})));0===n.length||n.every(t=>t)||H.add(r)}catch(t){H.add(r)}for(let t of G.unshallows)H.delete(t);if(await rh.write({fs:t,gitdir:c,oids:H}),v){let e=new Map([[N,U]]),r=new Map,i=10,a=N;for(;i--;){let t=P.symrefs.get(a);if(void 0===t)break;r.set(a,t),a=t}let n=C.get(a);n&&e.set(a,n);let{pruned:s}=await tg.updateRemoteRefs({fs:t,gitdir:c,remote:S,refs:e,symrefs:r,tags:$,prune:_});_&&(G.pruned=s)}else{let{pruned:e}=await tg.updateRemoteRefs({fs:t,gitdir:c,remote:S,refs:C,symrefs:P.symrefs,tags:$,prune:_,pruneTags:j});_&&(G.pruned=e)}if(G.HEAD=P.symrefs.get("HEAD"),void 0===G.HEAD){let{oid:t}=tg.resolveAgainstMap({ref:"HEAD",map:C});for(let[e,r]of C.entries())if("HEAD"!==e&&r===t){G.HEAD=e;break}}let q=N.startsWith("refs/tags")?"tag":"branch";G.FETCH_HEAD={oid:U,description:`${q} '${e6(N)}' of ${R}`},(i||a)&&e7(r$(G.progress),async t=>{if(a&&await a(t),i){let e=t.match(/([^:]*).*\((\d+?)\/(\d+?)\)/);e&&await i({phase:e[1].trim(),loaded:parseInt(e[2],10),total:parseInt(e[3],10)})}});let L=h.from(await rt(G.packfile));if(F.body.error)throw F.body.error;let V=L.slice(-20).toString("hex"),K={defaultBranch:G.HEAD,fetchHead:G.FETCH_HEAD.oid,fetchHeadDescription:G.FETCH_HEAD.description};if(G.headers&&(K.headers=G.headers),_&&(K.pruned=G.pruned),""!==V&&"5041434b0000000200000000"!==L.slice(0,12).toString("hex")){K.packfile=`objects/pack/pack-${V}.pack`;let r=(0,s.join)(c,K.packfile);await t.write(r,L);let a=await tN.fromPack({pack:L,getExternalRefDelta:r=>tH({fs:t,cache:e,gitdir:c,oid:r}),onProgress:i});await t.write(r.replace(/\.pack$/,".idx"),await a.toBuffer())}return K}async function rj({fs:t,bare:e=!1,dir:r,gitdir:i=e?r:(0,s.join)(r,".git"),defaultBranch:a="master"}){if(await t.exists(i+"/config"))return;let n=["hooks","info","objects/info","objects/pack","refs/heads","refs/tags"];for(let e of n=n.map(t=>i+"/"+t))await t.mkdir(e);await t.write(i+"/config",`[core]
	repositoryformatversion = 0
	filemode = false
	bare = ${e}
`+(e?"":"	logallrefupdates = true\n")+"	symlinks = false\n	ignorecase = true\n"),await t.write(i+"/HEAD",`ref: refs/heads/${a}
`)}async function rE({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,onPostCheckout:l,dir:c,gitdir:f,url:d,corsProxy:u,ref:h,remote:w,depth:m,since:p,exclude:g,relative:y,singleBranch:b,noCheckout:$,noTags:v,headers:x}){try{if(await rj({fs:t,gitdir:f}),await eZ({fs:t,gitdir:f,remote:w,url:d,force:!1}),u){let e=await th.get({fs:t,gitdir:f});await e.set("http.corsProxy",u),await th.save({fs:t,gitdir:f,config:e})}let{defaultBranch:_,fetchHead:j}=await r_({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,gitdir:f,ref:h,remote:w,corsProxy:u,depth:m,since:p,exclude:g,relative:y,singleBranch:b,headers:x,tags:!v});if(null===j)return;h=(h=h||_).replace("refs/heads/",""),await e2({fs:t,cache:e,onProgress:i,onPostCheckout:l,dir:c,gitdir:f,ref:h,remote:w,noCheckout:$})}catch(e){throw await t.rmdir(f,{recursive:!0,maxRetries:10}).catch(()=>void 0),e}}async function rk({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:o,onPostCheckout:l,dir:c,gitdir:f=(0,s.join)(c,".git"),url:d,corsProxy:u,ref:h,remote:w="origin",depth:m,since:p,exclude:g=[],relative:y=!1,singleBranch:b=!1,noCheckout:$=!1,noTags:v=!1,headers:x={},cache:_={}}){try{return e_("fs",t),e_("http",e),e_("gitdir",f),$||e_("dir",c),e_("url",d),await rE({fs:new ex(t),cache:_,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:o,onPostCheckout:l,dir:c,gitdir:f,url:d,corsProxy:u,ref:h,remote:w,depth:m,since:p,exclude:g,relative:y,singleBranch:b,noCheckout:$,noTags:v,headers:x})}catch(t){throw t.caller="git.clone",t}}async function rS({fs:t,onSign:e,dir:r,gitdir:i=(0,s.join)(r,".git"),message:a,author:n,committer:o,signingKey:l,amend:c=!1,dryRun:f=!1,noUpdateBranch:d=!1,ref:u,parent:h,tree:w,cache:m={}}){try{e_("fs",t),c||e_("message",a),l&&e_("onSign",e);let r=new ex(t);return await ez({fs:r,cache:m,onSign:e,gitdir:i,message:a,author:n,committer:o,signingKey:l,amend:c,dryRun:f,noUpdateBranch:d,ref:u,parent:h,tree:w})}catch(t){throw t.caller="git.commit",t}}async function rR({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),fullname:i=!1,test:a=!1}){try{return e_("fs",t),e_("gitdir",r),await e5({fs:new ex(t),gitdir:r,fullname:i,test:a})}catch(t){throw t.caller="git.currentBranch",t}}async function rI({fs:t,gitdir:e,ref:r}){if(r=r.startsWith("refs/heads/")?r:`refs/heads/${r}`,!await tg.exists({fs:t,gitdir:e,ref:r}))throw new W(r);let i=await tg.expand({fs:t,gitdir:e,ref:r});if(i===await e5({fs:t,gitdir:e,fullname:!0})){let r=await tg.resolve({fs:t,gitdir:e,ref:i});await tg.writeRef({fs:t,gitdir:e,ref:"HEAD",value:r})}await tg.deleteRef({fs:t,gitdir:e,ref:i});let a=e6(r),n=await th.get({fs:t,gitdir:e});await n.deleteSection("branch",a),await th.save({fs:t,gitdir:e,config:n})}async function rO({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i}){try{return e_("fs",t),e_("ref",i),await rI({fs:new ex(t),gitdir:r,ref:i})}catch(t){throw t.caller="git.deleteBranch",t}}async function rP({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i}){try{e_("fs",t),e_("ref",i),await tg.deleteRef({fs:new ex(t),gitdir:r,ref:i})}catch(t){throw t.caller="git.deleteRef",t}}async function rA({fs:t,gitdir:e,remote:r}){let i=await th.get({fs:t,gitdir:e});await i.deleteSection("remote",r),await th.save({fs:t,gitdir:e,config:i})}async function rC({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),remote:i}){try{return e_("fs",t),e_("remote",i),await rA({fs:new ex(t),gitdir:r,remote:i})}catch(t){throw t.caller="git.deleteRemote",t}}async function rU({fs:t,gitdir:e,ref:r}){r=r.startsWith("refs/tags/")?r:`refs/tags/${r}`,await tg.deleteRef({fs:t,gitdir:e,ref:r})}async function rN({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i}){try{return e_("fs",t),e_("ref",i),await rU({fs:new ex(t),gitdir:r,ref:i})}catch(t){throw t.caller="git.deleteTag",t}}async function rB({fs:t,gitdir:e,oid:r}){let i=r.slice(0,2);return(await t.readdir(`${e}/objects/${i}`)).map(t=>`${i}${t}`).filter(t=>t.startsWith(r))}async function rD({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:a}){let n=[],o=await t.readdir((0,s.join)(r,"objects/pack"));for(let s of o=o.filter(t=>t.endsWith(".idx"))){let o=`${r}/objects/pack/${s}`,l=await tM({fs:t,cache:e,filename:o,getExternalRefDelta:a});if(l.error)throw new g(l.error);for(let t of l.offsets.keys())t.startsWith(i)&&n.push(t)}return n}async function rM({fs:t,cache:e,gitdir:r,oid:i}){let a=await rB({fs:t,gitdir:r,oid:i});for(let n of(await rD({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:i=>tH({fs:t,cache:e,gitdir:r,oid:i})})))-1===a.indexOf(n)&&a.push(n);if(1===a.length)return a[0];if(a.length>1)throw new tW("oids",i,a);throw new W(`an object matching "${i}"`)}async function rT({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),oid:i,cache:a={}}){try{return e_("fs",t),e_("gitdir",r),e_("oid",i),await rM({fs:new ex(t),cache:a,gitdir:r,oid:i})}catch(t){throw t.caller="git.expandOid",t}}async function rH({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i}){try{return e_("fs",t),e_("gitdir",r),e_("ref",i),await tg.expand({fs:new ex(t),gitdir:r,ref:i})}catch(t){throw t.caller="git.expandRef",t}}async function rz({fs:t,cache:e,gitdir:r,oids:i}){let a={},n=i.length,s=i.map((t,e)=>({index:e,oid:t}));for(;s.length;){let i=new Set;for(let{oid:t,index:e}of s)a[t]||(a[t]=new Set),a[t].add(e),a[t].size===n&&i.add(t);if(i.size>0)return[...i];let o=new Map;for(let{oid:i,index:n}of s)try{let{object:s}=await tH({fs:t,cache:e,gitdir:r,oid:i}),{parent:l}=el.from(s).parseHeaders();for(let t of l)a[t]&&a[t].has(n)||o.set(t+":"+n,{oid:t,index:n})}catch(t){}s=Array.from(o.values())}return[]}let rW=/^.*(\r?\n|$)/gm;function rF({branches:t,contents:e}){let r=t[1],i=t[2],a=e[0],n=e[1],s=e[2],o=u(n.match(rW),a.match(rW),s.match(rW)),l="",c=!0;for(let t of o)t.ok&&(l+=t.ok.join("")),t.conflict&&(c=!1,l+=`${"<".repeat(7)} ${r}
`,l+=t.conflict.a.join(""),l+=`${"=".repeat(7)}
`,l+=t.conflict.b.join(""),l+=`${">".repeat(7)} ${i}
`);return{cleanMerge:c,mergedText:l}}async function rG({fs:t,cache:e,dir:r,gitdir:i=(0,s.join)(r,".git"),index:a,ourOid:n,baseOid:o,theirOid:l,ourName:c="ours",baseName:f="base",theirName:d="theirs",dryRun:u=!1,abortOnConflict:h=!0,mergeDriver:w}){let m=ed({ref:n}),p=ed({ref:o}),g=ed({ref:l}),y=[],b=[],$=[],v=[],x=await ep({fs:t,cache:e,dir:r,gitdir:i,trees:[m,p,g],map:async function(e,[r,n,s]){let o=B(e),l=await ej(r,n),u=await ej(s,n);switch(`${l}-${u}`){case"false-false":return{mode:await n.mode(),path:o,oid:await n.oid(),type:await n.type()};case"false-true":return s?{mode:await s.mode(),path:o,oid:await s.oid(),type:await s.type()}:void 0;case"true-false":return r?{mode:await r.mode(),path:o,oid:await r.oid(),type:await r.type()}:void 0;case"true-true":if(r&&n&&s&&await r.type()==="blob"&&await n.type()==="blob"&&await s.type()==="blob")return rq({fs:t,gitdir:i,path:o,ours:r,base:n,theirs:s,ourName:c,baseName:f,theirName:d,mergeDriver:w}).then(async t=>{if(t.cleanMerge)h||a.insert({filepath:e,oid:t.mergeResult.oid,stage:0});else if(y.push(e),b.push(e),!h){let t=await n.oid(),i=await r.oid(),o=await s.oid();a.delete({filepath:e}),a.insert({filepath:e,oid:t,stage:1}),a.insert({filepath:e,oid:i,stage:2}),a.insert({filepath:e,oid:o,stage:3})}return t.mergeResult});if(n&&!r&&s&&await n.type()==="blob"&&await s.type()==="blob"){if(y.push(e),$.push(e),!h){let t=await n.oid(),r=await s.oid();a.delete({filepath:e}),a.insert({filepath:e,oid:t,stage:1}),a.insert({filepath:e,oid:r,stage:3})}return{mode:await s.mode(),oid:await s.oid(),type:"blob",path:o}}if(n&&r&&!s&&await n.type()==="blob"&&await r.type()==="blob"){if(y.push(e),v.push(e),!h){let t=await n.oid(),i=await r.oid();a.delete({filepath:e}),a.insert({filepath:e,oid:t,stage:1}),a.insert({filepath:e,oid:i,stage:2})}return{mode:await r.mode(),oid:await r.oid(),type:"blob",path:o}}if(n&&!r&&!s&&await n.type()==="blob")return;throw new tX}},reduce:0!==y.length&&(!r||h)?void 0:async(e,r)=>{let a=r.filter(Boolean);if(e&&(!e||"tree"!==e.type||0!==a.length)){if(a.length>0){let r=new tx(a).toObject(),n=await eP({fs:t,gitdir:i,type:"tree",object:r,dryRun:u});e.oid=n}return e}}});return 0!==y.length?(r&&!h&&await ep({fs:t,cache:e,dir:r,gitdir:i,trees:[ed({ref:x.oid})],map:async function(e,[i]){let a=`${r}/${e}`;if(await i.type()==="blob"){let e=await i.mode(),r=new TextDecoder().decode(await i.content());await t.write(a,r,{mode:e})}return!0}}),new tQ(y,b,$,v)):x.oid}async function rq({fs:t,gitdir:e,path:r,ours:i,base:a,theirs:n,ourName:s,theirName:o,baseName:l,dryRun:c,mergeDriver:f=rF}){let d="blob",u=await a.mode()===await i.mode()?await n.mode():await i.mode();if(await i.oid()===await n.oid())return{cleanMerge:!0,mergeResult:{mode:u,path:r,oid:await i.oid(),type:d}};if(await i.oid()===await a.oid())return{cleanMerge:!0,mergeResult:{mode:u,path:r,oid:await n.oid(),type:d}};if(await n.oid()===await a.oid())return{cleanMerge:!0,mergeResult:{mode:u,path:r,oid:await i.oid(),type:d}};let w=h.from(await i.content()).toString("utf8"),m=h.from(await a.content()).toString("utf8"),p=h.from(await n.content()).toString("utf8"),{mergedText:g,cleanMerge:y}=await f({branches:[l,s,o],contents:[m,w,p],path:r});return{cleanMerge:y,mergeResult:{mode:u,path:r,oid:await eP({fs:t,gitdir:e,type:"blob",object:h.from(g,"utf8"),dryRun:c}),type:d}}}async function rL({fs:t,cache:e,dir:r,gitdir:i,ours:a,theirs:n,fastForward:s=!0,fastForwardOnly:o=!1,dryRun:l=!1,noUpdateBranch:c=!1,abortOnConflict:f=!0,message:d,author:u,committer:h,signingKey:w,onSign:m,mergeDriver:p}){void 0===a&&(a=await e5({fs:t,gitdir:i,fullname:!0})),a=await tg.expand({fs:t,gitdir:i,ref:a}),n=await tg.expand({fs:t,gitdir:i,ref:n});let g=await tg.resolve({fs:t,gitdir:i,ref:a}),y=await tg.resolve({fs:t,gitdir:i,ref:n}),b=await rz({fs:t,cache:e,gitdir:i,oids:[g,y]});if(1!==b.length)throw new tX;let $=b[0];if($===y)return{oid:g,alreadyMerged:!0};if(s&&$===g)return l||c||await tg.writeRef({fs:t,gitdir:i,ref:a,value:y}),{oid:y,fastForward:!0};{if(o)throw new tL;let s=await N.acquire({fs:t,gitdir:i,cache:e,allowUnmerged:!1},async s=>rG({fs:t,cache:e,dir:r,gitdir:i,index:s,ourOid:g,theirOid:y,baseOid:$,ourName:e6(a),baseName:"base",theirName:e6(n),dryRun:l,abortOnConflict:f,mergeDriver:p}));if(s instanceof tQ)throw s;return d||(d=`Merge branch '${e6(n)}' into ${e6(a)}`),{oid:await ez({fs:t,cache:e,gitdir:i,message:d,ref:a,tree:s,parent:[g,y],author:u,committer:h,signingKey:w,onSign:m,dryRun:l,noUpdateBranch:c}),tree:s,mergeCommit:!0}}}async function rV({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,dir:l,gitdir:c,ref:f,url:d,remote:u,remoteRef:h,prune:w,pruneTags:m,fastForward:p,fastForwardOnly:g,corsProxy:y,singleBranch:b,headers:$,author:v,committer:x,signingKey:_}){try{if(!f){let e=await e5({fs:t,gitdir:c});if(!e)throw new t1("ref");f=e}let{fetchHead:j,fetchHeadDescription:E}=await r_({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,gitdir:c,corsProxy:y,ref:f,url:d,remote:u,remoteRef:h,singleBranch:b,headers:$,prune:w,pruneTags:m});await rL({fs:t,cache:e,gitdir:c,ours:f,theirs:j,fastForward:p,fastForwardOnly:g,message:`Merge ${E}`,author:v,committer:x,signingKey:_,dryRun:!1,noUpdateBranch:!1}),await e2({fs:t,cache:e,onProgress:i,dir:l,gitdir:c,ref:f,remote:u,noCheckout:!1})}catch(t){throw t.caller="git.pull",t}}async function rK({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:o,dir:l,gitdir:c=(0,s.join)(l,".git"),ref:f,url:d,remote:u,remoteRef:h,corsProxy:w,singleBranch:m,headers:p={},cache:g={}}){try{e_("fs",t),e_("http",e),e_("gitdir",c);let s={name:"",email:"",timestamp:Date.now(),timezoneOffset:0};return await rV({fs:new ex(t),cache:g,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:o,dir:l,gitdir:c,ref:f,url:d,remote:u,remoteRef:h,fastForwardOnly:!0,corsProxy:w,singleBranch:m,headers:p,author:s,committer:s})}catch(t){throw t.caller="git.fastForward",t}}async function rZ({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:o,dir:l,gitdir:c=(0,s.join)(l,".git"),ref:f,remote:d,remoteRef:u,url:h,corsProxy:w,depth:m=null,since:p=null,exclude:g=[],relative:y=!1,tags:b=!1,singleBranch:$=!1,headers:v={},prune:x=!1,pruneTags:_=!1,cache:j={}}){try{return e_("fs",t),e_("http",e),e_("gitdir",c),await r_({fs:new ex(t),cache:j,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:o,gitdir:c,ref:f,remote:d,remoteRef:u,url:h,corsProxy:w,depth:m,since:p,exclude:g,relative:y,tags:b,singleBranch:$,headers:v,prune:x,pruneTags:_})}catch(t){throw t.caller="git.fetch",t}}async function rY({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),oids:i,cache:a={}}){try{return e_("fs",t),e_("gitdir",r),e_("oids",i),await rz({fs:new ex(t),cache:a,gitdir:r,oids:i})}catch(t){throw t.caller="git.findMergeBase",t}}async function rJ({fs:t,filepath:e}){if(await t.exists((0,s.join)(e,".git")))return e;{let r=D(e);if(r===e)throw new W(`git root for ${e}`);return rJ({fs:t,filepath:r})}}async function rX({fs:t,filepath:e}){try{return e_("fs",t),e_("filepath",e),await rJ({fs:new ex(t),filepath:e})}catch(t){throw t.caller="git.findRoot",t}}async function rQ({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),path:i}){try{return e_("fs",t),e_("gitdir",r),e_("path",i),await eN({fs:new ex(t),gitdir:r,path:i})}catch(t){throw t.caller="git.getConfig",t}}async function r0({fs:t,gitdir:e,path:r}){return(await th.get({fs:t,gitdir:e})).getall(r)}async function r1({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),path:i}){try{return e_("fs",t),e_("gitdir",r),e_("path",i),await r0({fs:new ex(t),gitdir:r,path:i})}catch(t){throw t.caller="git.getConfigAll",t}}async function r2({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,url:n,headers:s={},forPush:o=!1}){try{e_("http",t),e_("url",n);let l=rd.getRemoteHelperFor({url:n}),c=await l.discover({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:n,headers:s,protocolVersion:1}),f={capabilities:[...c.capabilities]};for(let[t,e]of c.refs){let r=t.split("/"),i=r.pop(),a=f;for(let t of r)a[t]=a[t]||{},a=a[t];a[i]=e}for(let[t,e]of c.symrefs){let r=t.split("/"),i=r.pop(),a=f;for(let t of r)a[t]=a[t]||{},a=a[t];a[i]=e}return f}catch(t){throw t.caller="git.getRemoteInfo",t}}function r8(t,e,r,i){let a=[];for(let[n,s]of t.refs){if(e&&!n.startsWith(e))continue;if(n.endsWith("^{}")){if(i){let t=n.replace("^{}",""),e=a[a.length-1],r=e.ref===t?e:a.find(e=>e.ref===t);if(void 0===r)throw Error("I did not expect this to happen");r.peeled=s}continue}let o={ref:n,oid:s};r&&t.symrefs.has(n)&&(o.target=t.symrefs.get(n)),a.push(o)}return a}async function r4({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,url:n,headers:s={},forPush:o=!1,protocolVersion:l=2}){try{e_("http",t),e_("url",n);let c=rd.getRemoteHelperFor({url:n}),f=await c.discover({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:n,headers:s,protocolVersion:l});if(2===f.protocolVersion)return{protocolVersion:f.protocolVersion,capabilities:f.capabilities2};let d={};for(let t of f.capabilities){let[e,r]=t.split("=");r?d[e]=r:d[e]=!0}return{protocolVersion:1,capabilities:d,refs:r8(f,void 0,!0,!0)}}catch(t){throw t.caller="git.getRemoteInfo2",t}}async function r3({type:t,object:e,format:r="content",oid:i}){return"deflated"!==r&&("wrapped"!==r&&(e=t_.wrap({type:t,object:e})),i=await k(e)),{oid:i,object:e}}async function r6({object:t}){try{e_("object",t),t="string"==typeof t?h.from(t,"utf8"):h.from(t);let{oid:e,object:r}=await r3({type:"blob",format:"content",object:t});return{oid:e,type:"blob",object:new Uint8Array(r),format:"wrapped"}}catch(t){throw t.caller="git.hashBlob",t}}async function r5({fs:t,cache:e,onProgress:r,dir:i,gitdir:a,filepath:n}){try{n=(0,s.join)(i,n);let o=await t.read(n),l=await tN.fromPack({pack:o,getExternalRefDelta:r=>tH({fs:t,cache:e,gitdir:a,oid:r}),onProgress:r});return await t.write(n.replace(/\.pack$/,".idx"),await l.toBuffer()),{oids:[...l.hashes]}}catch(t){throw t.caller="git.indexPack",t}}async function r9({fs:t,onProgress:e,dir:r,gitdir:i=(0,s.join)(r,".git"),filepath:a,cache:n={}}){try{return e_("fs",t),e_("dir",r),e_("gitdir",r),e_("filepath",a),await r5({fs:new ex(t),cache:n,onProgress:e,dir:r,gitdir:i,filepath:a})}catch(t){throw t.caller="git.indexPack",t}}async function r7({fs:t,bare:e=!1,dir:r,gitdir:i=e?r:(0,s.join)(r,".git"),defaultBranch:a="master"}){try{return e_("fs",t),e_("gitdir",i),e||e_("dir",r),await rj({fs:new ex(t),bare:e,dir:r,gitdir:i,defaultBranch:a})}catch(t){throw t.caller="git.init",t}}async function it({fs:t,cache:e,gitdir:r,oid:i,ancestor:a,depth:n}){let s=await rh.read({fs:t,gitdir:r});if(!i)throw new t1("oid");if(!a)throw new t1("ancestor");if(i===a)return!1;let o=[i],l=new Set,c=0;for(;o.length;){if(c++===n)throw new tJ(n);let i=o.shift(),{type:f,object:d}=await tH({fs:t,cache:e,gitdir:r,oid:i});if("commit"!==f)throw new F(i,f,"commit");let u=el.from(d).parse();for(let t of u.parent)if(t===a)return!0;if(!s.has(i))for(let t of u.parent)l.has(t)||(o.push(t),l.add(t))}return!1}async function ie({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),oid:i,ancestor:a,depth:n=-1,cache:o={}}){try{return e_("fs",t),e_("gitdir",r),e_("oid",i),e_("ancestor",a),await it({fs:new ex(t),cache:o,gitdir:r,oid:i,ancestor:a,depth:n})}catch(t){throw t.caller="git.isDescendent",t}}async function ir({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),filepath:i}){try{return e_("fs",t),e_("dir",e),e_("gitdir",r),e_("filepath",i),ek.isIgnored({fs:new ex(t),dir:e,gitdir:r,filepath:i})}catch(t){throw t.caller="git.isIgnored",t}}async function ii({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),remote:i}){try{return e_("fs",t),e_("gitdir",r),tg.listBranches({fs:new ex(t),gitdir:r,remote:i})}catch(t){throw t.caller="git.listBranches",t}}async function ia({fs:t,gitdir:e,ref:r,cache:i}){if(!r)return N.acquire({fs:t,gitdir:e,cache:i},async function(t){return t.entries.map(t=>t.path)});{let a=await tg.resolve({gitdir:e,fs:t,ref:r}),n=[];return await is({fs:t,cache:i,gitdir:e,oid:a,filenames:n,prefix:""}),n}}async function is({fs:t,cache:e,gitdir:r,oid:i,filenames:a,prefix:n}){let{tree:o}=await eq({fs:t,cache:e,gitdir:r,oid:i});for(let i of o)"tree"===i.type?await is({fs:t,cache:e,gitdir:r,oid:i.oid,filenames:a,prefix:(0,s.join)(n,i.path)}):a.push((0,s.join)(n,i.path))}async function io({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i,cache:a={}}){try{return e_("fs",t),e_("gitdir",r),await ia({fs:new ex(t),cache:a,gitdir:r,ref:i})}catch(t){throw t.caller="git.listFiles",t}}async function il({fs:t,cache:e,gitdir:r,ref:i}){let a;try{a=await tg.resolve({gitdir:r,fs:t,ref:i})}catch(t){if(t instanceof W)return[]}return(await eq({fs:t,cache:e,gitdir:r,oid:a})).tree.map(t=>({target:t.path,note:t.oid}))}async function ic({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i="refs/notes/commits",cache:a={}}){try{return e_("fs",t),e_("gitdir",r),e_("ref",i),await il({fs:new ex(t),cache:a,gitdir:r,ref:i})}catch(t){throw t.caller="git.listNotes",t}}async function id({fs:t,gitdir:e}){let r=await th.get({fs:t,gitdir:e});return Promise.all((await r.getSubsections("remote")).map(async t=>{let e=await r.get(`remote.${t}.url`);return{remote:t,url:e}}))}async function iu({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git")}){try{return e_("fs",t),e_("gitdir",r),await id({fs:new ex(t),gitdir:r})}catch(t){throw t.caller="git.listRemotes",t}}async function ih(t){let e;let r=ri.streamReader(t),i=[];for(;!0!==(e=await r());){if(null===e)continue;let[t,r,...a]=(e=e.toString("utf8").replace(/\n$/,"")).split(" "),n={ref:r,oid:t};for(let t of a){let[e,r]=t.split(":");"symref-target"===e?n.target=r:"peeled"===e&&(n.peeled=r)}i.push(n)}return i}async function iw({prefix:t,symrefs:e,peelTags:r}){let i=[];return i.push(ri.encode("command=ls-refs\n")),i.push(ri.encode(`agent=${ry.agent}
`)),(r||e||t)&&i.push(ri.delim()),r&&i.push(ri.encode("peel")),e&&i.push(ri.encode("symrefs")),t&&i.push(ri.encode(`ref-prefix ${t}`)),i.push(ri.flush()),i}async function im({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,url:n,headers:s={},forPush:o=!1,protocolVersion:l=2,prefix:c,symrefs:f,peelTags:d}){try{e_("http",t),e_("url",n);let u=await rf.discover({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:n,headers:s,protocolVersion:l});if(1===u.protocolVersion)return r8(u,c,f,d);let h=await iw({prefix:c,symrefs:f,peelTags:d}),w=await rf.connect({http:t,auth:u.auth,headers:s,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:n,body:h});return ih(w.body)}catch(t){throw t.caller="git.listServerRefs",t}}async function ip({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git")}){try{return e_("fs",t),e_("gitdir",r),tg.listTags({fs:new ex(t),gitdir:r})}catch(t){throw t.caller="git.listTags",t}}async function ig({fs:t,cache:e,gitdir:r,oid:i,fileId:a}){let n;if("e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"===a)return;let s=await ec({fs:t,cache:e,gitdir:r,oid:i}),o=s.tree;return a===s.oid?n=s.path:Array.isArray(n=await iy({fs:t,cache:e,gitdir:r,tree:o,fileId:a,oid:i}))&&(0===n.length?n=void 0:1===n.length&&(n=n[0])),n}async function iy({fs:t,cache:e,gitdir:r,tree:i,fileId:a,oid:n,filepaths:o=[],parentPath:l=""}){let c=i.entries().map(function(i){let c;return i.oid===a?(c=(0,s.join)(l,i.path),o.push(c)):"tree"===i.type&&(c=tH({fs:t,cache:e,gitdir:r,oid:i.oid}).then(function({object:c}){return iy({fs:t,cache:e,gitdir:r,tree:tx.from(c),fileId:a,oid:n,filepaths:o,parentPath:(0,s.join)(l,i.path)})})),c});return await Promise.all(c),o}async function ib({fs:t,cache:e,gitdir:r,filepath:i,ref:a,depth:n,since:s,force:o,follow:l}){let c,f,d;let u=void 0===s?void 0:Math.floor(s.valueOf()/1e3),h=[],w=await rh.read({fs:t,gitdir:r}),m=await tg.resolve({fs:t,gitdir:r,ref:a}),p=[await eH({fs:t,cache:e,gitdir:r,oid:m})];function g(t){d&&i&&h.push(t)}for(;p.length>0;){let a=p.pop();if(void 0!==u&&a.commit.committer.timestamp<=u)break;if(i){let n;try{n=await eF({fs:t,cache:e,gitdir:r,oid:a.commit.tree,filepath:i}),f&&c!==n&&h.push(f),c=n,f=a,d=!0}catch(n){if(n instanceof W){let s=l&&c;if(s&&(s=await ig({fs:t,cache:e,gitdir:r,oid:a.commit.tree,fileId:c}))){if(Array.isArray(s)){if(f){let a=await ig({fs:t,cache:e,gitdir:r,oid:f.commit.tree,fileId:c});if(Array.isArray(a)){if(1===(s=s.filter(t=>-1===a.indexOf(t))).length)i=s=s[0],f&&h.push(f);else{s=!1,f&&h.push(f);break}}}}else i=s,f&&h.push(f)}if(!s){if(d&&c&&(h.push(f),!o))break;if(!o&&!l)throw n}f=a,d=!1}else throw n}}else h.push(a);if(void 0!==n&&h.length===n){g(a);break}if(!w.has(a.oid))for(let i of a.commit.parent){let a=await eH({fs:t,cache:e,gitdir:r,oid:i});p.map(t=>t.oid).includes(a.oid)||p.push(a)}0===p.length&&g(a),p.sort((t,e)=>{var r,i;return r=t.commit,i=e.commit,r.committer.timestamp-i.committer.timestamp})}return h}async function i$({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),filepath:i,ref:a="HEAD",depth:n,since:o,force:l,follow:c,cache:f={}}){try{return e_("fs",t),e_("gitdir",r),e_("ref",a),await ib({fs:new ex(t),cache:f,gitdir:r,filepath:i,ref:a,depth:n,since:o,force:l,follow:c})}catch(t){throw t.caller="git.log",t}}async function iv({fs:t,onSign:e,dir:r,gitdir:i=(0,s.join)(r,".git"),ours:a,theirs:n,fastForward:o=!0,fastForwardOnly:l=!1,dryRun:c=!1,noUpdateBranch:f=!1,abortOnConflict:d=!0,message:u,author:h,committer:w,signingKey:m,cache:p={},mergeDriver:g}){try{e_("fs",t),m&&e_("onSign",e);let s=new ex(t),y=await eD({fs:s,gitdir:i,author:h});if(!y&&(!l||!o))throw new t0("author");let b=await eM({fs:s,gitdir:i,author:y,committer:w});if(!b&&(!l||!o))throw new t0("committer");return await rL({fs:s,cache:p,dir:r,gitdir:i,ours:a,theirs:n,fastForward:o,fastForwardOnly:l,dryRun:c,noUpdateBranch:f,abortOnConflict:d,message:u,author:y,committer:b,signingKey:m,onSign:e,mergeDriver:g})}catch(t){throw t.caller="git.merge",t}}let ix={commit:16,tree:32,blob:48,tag:64,ofs_delta:96,ref_delta:112};async function i_({fs:t,cache:e,dir:r,gitdir:i=(0,s.join)(r,".git"),oids:a}){let o=new n,l=[];function c(t,e){let r=h.from(t,e);l.push(r),o.update(r)}async function f({stype:t,object:e}){let r=ix[t],i=e.length,a=i>15?128:0,n=15&i;i>>>=4;let s=(a|r|n).toString(16);for(c(s,"hex");a;)c(rr(2,s=(a=i>127?128:0)|127&i),"hex"),i>>>=7;c(h.from(await eI(e)))}for(let r of(c("PACK"),c("00000002","hex"),c(rr(8,a.length),"hex"),a)){let{type:a,object:n}=await tH({fs:t,cache:e,gitdir:i,oid:r});await f({write:c,object:n,stype:a})}let d=o.digest();return l.push(d),l}async function ij({fs:t,cache:e,gitdir:r,oids:i,write:a}){let n=await i_({fs:t,cache:e,gitdir:r,oids:i}),o=h.from(await rt(n)),l=o.slice(-20).toString("hex"),c=`pack-${l}.pack`;return a?(await t.write((0,s.join)(r,`objects/pack/${c}`),o),{filename:c}):{filename:c,packfile:new Uint8Array(o)}}async function iE({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),oids:i,write:a=!1,cache:n={}}){try{return e_("fs",t),e_("gitdir",r),e_("oids",i),await ij({fs:new ex(t),cache:n,gitdir:r,oids:i,write:a})}catch(t){throw t.caller="git.packObjects",t}}async function ik({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:o,dir:l,gitdir:c=(0,s.join)(l,".git"),ref:f,url:d,remote:u,remoteRef:h,prune:w=!1,pruneTags:m=!1,fastForward:p=!0,fastForwardOnly:g=!1,corsProxy:y,singleBranch:b,headers:$={},author:v,committer:x,signingKey:_,cache:j={}}){try{e_("fs",t),e_("gitdir",c);let s=new ex(t),E=await eD({fs:s,gitdir:c,author:v});if(!E)throw new t0("author");let k=await eM({fs:s,gitdir:c,author:E,committer:x});if(!k)throw new t0("committer");return await rV({fs:s,cache:j,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:o,dir:l,gitdir:c,ref:f,url:d,remote:u,remoteRef:h,fastForward:p,fastForwardOnly:g,corsProxy:y,singleBranch:b,headers:$,author:E,committer:k,signingKey:_,prune:w,pruneTags:m})}catch(t){throw t.caller="git.pull",t}}async function iS({fs:t,cache:e,dir:r,gitdir:i=(0,s.join)(r,".git"),start:a,finish:n}){let o=await rh.read({fs:t,gitdir:i}),l=new Set,c=new Set;for(let e of a)l.add(await tg.resolve({fs:t,gitdir:i,ref:e}));for(let e of n)try{let r=await tg.resolve({fs:t,gitdir:i,ref:e});c.add(r)}catch(t){}let f=new Set;async function d(r){f.add(r);let{type:a,object:n}=await tH({fs:t,cache:e,gitdir:i,oid:r});if("tag"===a)return d(es.from(n).headers().object);if("commit"!==a)throw new F(r,a,"commit");if(!o.has(r))for(r of el.from(n).headers().parent)c.has(r)||f.has(r)||await d(r)}for(let t of l)await d(t);return f}async function iR({fs:t,cache:e,dir:r,gitdir:i=(0,s.join)(r,".git"),oids:a}){let n=new Set;async function o(r){if(n.has(r))return;n.add(r);let{type:a,object:s}=await tH({fs:t,cache:e,gitdir:i,oid:r});if("tag"===a){let t=es.from(s).headers().object;await o(t)}else if("commit"===a){let t=el.from(s).headers().tree;await o(t)}else if("tree"===a)for(let t of tx.from(s))"blob"===t.type&&n.add(t.oid),"tree"===t.type&&await o(t.oid)}for(let t of a)await o(t);return n}async function iI(t){let e={},r="",i=ri.streamReader(t),a=await i();for(;!0!==a;)null!==a&&(r+=a.toString("utf8")+"\n"),a=await i();let n=r.toString("utf8").split("\n");if(!(a=n.shift()).startsWith("unpack "))throw new t8('unpack ok" or "unpack [error message]',a);for(let t of(e.ok="unpack ok"===a,e.ok||(e.error=a.slice(7)),e.refs={},n)){if(""===t.trim())continue;let r=t.slice(0,2),i=t.slice(3),a=i.indexOf(" ");-1===a&&(a=i.length);let n=i.slice(0,a),s=i.slice(a+1);e.refs[n]={ok:"ok"===r,error:s}}return e}async function iO({capabilities:t=[],triplets:e=[]}){let r=[],i=`\0 ${t.join(" ")}`;for(let t of e)r.push(ri.encode(`${t.oldoid} ${t.oid} ${t.fullRef}${i}
`)),i="";return r.push(ri.flush()),r}async function iP({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,onPrePush:l,gitdir:c,ref:f,remoteRef:d,remote:u,url:h,force:w=!1,delete:m=!1,corsProxy:p,headers:g={}}){let y;let b=f||await e5({fs:t,gitdir:c});if(void 0===b)throw new t1("ref");let $=await th.get({fs:t,gitdir:c});u=u||await $.get(`branch.${b}.pushRemote`)||await $.get("remote.pushDefault")||await $.get(`branch.${b}.remote`)||"origin";let v=h||await $.get(`remote.${u}.pushurl`)||await $.get(`remote.${u}.url`);if(void 0===v)throw new t1("remote OR url");let x=d||await $.get(`branch.${b}.merge`);if(void 0===v)throw new t1("remoteRef");void 0===p&&(p=await $.get("http.corsProxy"));let _=await tg.expand({fs:t,gitdir:c,ref:b}),j=m?"0000000000000000000000000000000000000000":await tg.resolve({fs:t,gitdir:c,ref:_}),E=rd.getRemoteHelperFor({url:v}),k=await E.discover({http:r,onAuth:n,onAuthSuccess:s,onAuthFailure:o,corsProxy:p,service:"git-receive-pack",url:v,headers:g,protocolVersion:1}),S=k.auth;if(x)try{y=await tg.expandAgainstMap({ref:x,map:k.refs})}catch(t){if(t instanceof W)y=x.startsWith("refs/")?x:`refs/heads/${x}`;else throw t}else y=_;let R=k.refs.get(y)||"0000000000000000000000000000000000000000";if(l&&!await l({remote:u,url:v,localRef:{ref:m?"(delete)":_,oid:j},remoteRef:{ref:y,oid:R}}))throw new t7;let I=!k.capabilities.has("no-thin"),O=new Set;if(!m){let r=[...k.refs.values()],i=new Set;if("0000000000000000000000000000000000000000"!==R){let a=await rz({fs:t,cache:e,gitdir:c,oids:[j,R]});for(let t of a)r.push(t);I&&(i=await iR({fs:t,cache:e,gitdir:c,oids:a}))}if(!r.includes(j)){let i=await iS({fs:t,cache:e,gitdir:c,start:[j],finish:r});O=await iR({fs:t,cache:e,gitdir:c,oids:i})}if(I){try{let r=await tg.resolve({fs:t,gitdir:c,ref:`refs/remotes/${u}/HEAD`,depth:2}),{oid:a}=await tg.resolveAgainstMap({ref:r.replace(`refs/remotes/${u}/`,""),fullref:r,map:k.refs});for(let r of(await iR({fs:t,cache:e,gitdir:c,oids:[a]})))i.add(r)}catch(t){}for(let t of i)O.delete(t)}if(j===R&&(w=!0),!w){if(_.startsWith("refs/tags")&&"0000000000000000000000000000000000000000"!==R)throw new t4("tag-exists");if("0000000000000000000000000000000000000000"!==j&&"0000000000000000000000000000000000000000"!==R&&!await it({fs:t,cache:e,gitdir:c,oid:j,ancestor:R,depth:-1}))throw new t4("not-fast-forward")}}let P=rg([...k.capabilities],["report-status","side-band-64k",`agent=${ry.agent}`]),A=await iO({capabilities:P,triplets:[{oldoid:R,oid:j,fullRef:y}]}),C=m?[]:await i_({fs:t,cache:e,gitdir:c,oids:[...O]}),U=await E.connect({http:r,onProgress:i,corsProxy:p,service:"git-receive-pack",url:v,auth:S,headers:g,body:[...A,...C]}),{packfile:N,progress:B}=await rv.demux(U.body);a&&e7(r$(B),async t=>{await a(t)});let D=await iI(N);if(U.headers&&(D.headers=U.headers),u&&D.ok&&D.refs[y].ok&&!_.startsWith("refs/tags")){let e=`refs/remotes/${u}/${y.replace("refs/heads","")}`;m?await tg.deleteRef({fs:t,gitdir:c,ref:e}):await tg.writeRef({fs:t,gitdir:c,ref:e,value:j})}if(D.ok&&Object.values(D.refs).every(t=>t.ok))return D;throw new tV(Object.entries(D.refs).filter(([t,e])=>!e.ok).map(([t,e])=>`
  - ${t}: ${e.error}`).join(""),D)}async function iA({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:o,onPrePush:l,dir:c,gitdir:f=(0,s.join)(c,".git"),ref:d,remoteRef:u,remote:h="origin",url:w,force:m=!1,delete:p=!1,corsProxy:g,headers:y={},cache:b={}}){try{return e_("fs",t),e_("http",e),e_("gitdir",f),await iP({fs:new ex(t),cache:b,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:o,onPrePush:l,gitdir:f,ref:d,remoteRef:u,remote:h,url:w,force:m,delete:p,corsProxy:g,headers:y})}catch(t){throw t.caller="git.push",t}}async function iC({fs:t,cache:e,gitdir:r,oid:i}){let{type:a,object:n}=await tH({fs:t,cache:e,gitdir:r,oid:i});if("tag"===a)return iC({fs:t,cache:e,gitdir:r,oid:i=es.from(n).parse().object});if("blob"!==a)throw new F(i,a,"blob");return{oid:i,blob:new Uint8Array(n)}}async function iU({fs:t,cache:e,gitdir:r,oid:i,filepath:a}){return void 0!==a&&(i=await eF({fs:t,cache:e,gitdir:r,oid:i,filepath:a})),await iC({fs:t,cache:e,gitdir:r,oid:i})}async function iN({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),oid:i,filepath:a,cache:n={}}){try{return e_("fs",t),e_("gitdir",r),e_("oid",i),await iU({fs:new ex(t),cache:n,gitdir:r,oid:i,filepath:a})}catch(t){throw t.caller="git.readBlob",t}}async function iB({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),oid:i,cache:a={}}){try{return e_("fs",t),e_("gitdir",r),e_("oid",i),await eH({fs:new ex(t),cache:a,gitdir:r,oid:i})}catch(t){throw t.caller="git.readCommit",t}}async function iD({fs:t,cache:e,gitdir:r,ref:i="refs/notes/commits",oid:a}){let n=await tg.resolve({gitdir:r,fs:t,ref:i}),{blob:s}=await iU({fs:t,cache:e,gitdir:r,oid:n,filepath:a});return s}async function iM({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i="refs/notes/commits",oid:a,cache:n={}}){try{return e_("fs",t),e_("gitdir",r),e_("ref",i),e_("oid",a),await iD({fs:new ex(t),cache:n,gitdir:r,ref:i,oid:a})}catch(t){throw t.caller="git.readNote",t}}async function iT({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),oid:i,format:a="parsed",filepath:n,encoding:o,cache:l={}}){try{e_("fs",t),e_("gitdir",r),e_("oid",i);let e=new ex(t);void 0!==n&&(i=await eF({fs:e,cache:l,gitdir:r,oid:i,filepath:n}));let s=await tH({fs:e,cache:l,gitdir:r,oid:i,format:"parsed"===a?"content":a});if(s.oid=i,"parsed"===a)switch(s.format="parsed",s.type){case"commit":s.object=el.from(s.object).parse();break;case"tree":s.object=tx.from(s.object).entries();break;case"blob":o?s.object=s.object.toString(o):(s.object=new Uint8Array(s.object),s.format="content");break;case"tag":s.object=es.from(s.object).parse();break;default:throw new F(s.oid,s.type,"blob|commit|tag|tree")}else("deflated"===s.format||"wrapped"===s.format)&&(s.type=s.format);return s}catch(t){throw t.caller="git.readObject",t}}async function iH({fs:t,cache:e,gitdir:r,oid:i}){let{type:a,object:n}=await tH({fs:t,cache:e,gitdir:r,oid:i,format:"content"});if("tag"!==a)throw new F(i,a,"tag");let s=es.from(n);return{oid:i,tag:s.parse(),payload:s.payload()}}async function iz({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),oid:i,cache:a={}}){try{return e_("fs",t),e_("gitdir",r),e_("oid",i),await iH({fs:new ex(t),cache:a,gitdir:r,oid:i})}catch(t){throw t.caller="git.readTag",t}}async function iW({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),oid:i,filepath:a,cache:n={}}){try{return e_("fs",t),e_("gitdir",r),e_("oid",i),await eq({fs:new ex(t),cache:n,gitdir:r,oid:i,filepath:a})}catch(t){throw t.caller="git.readTree",t}}async function iF({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),filepath:i,cache:a={}}){try{e_("fs",t),e_("gitdir",r),e_("filepath",i),await N.acquire({fs:new ex(t),gitdir:r,cache:a},async function(t){t.delete({filepath:i})})}catch(t){throw t.caller="git.remove",t}}async function iG({fs:t,cache:e,onSign:r,gitdir:i,ref:a="refs/notes/commits",oid:n,author:s,committer:o,signingKey:l}){let c;try{c=await tg.resolve({gitdir:i,fs:t,ref:a})}catch(t){if(!(t instanceof W))throw t}let f=(await eq({fs:t,gitdir:i,oid:c||"4b825dc642cb6eb9a060e54bf8d69288fbee4904"})).tree;f=f.filter(t=>t.path!==n);let d=await eL({fs:t,gitdir:i,tree:f});return await ez({fs:t,cache:e,onSign:r,gitdir:i,ref:a,tree:d,parent:c&&[c],message:`Note removed by 'isomorphic-git removeNote'
`,author:s,committer:o,signingKey:l})}async function iq({fs:t,onSign:e,dir:r,gitdir:i=(0,s.join)(r,".git"),ref:a="refs/notes/commits",oid:n,author:o,committer:l,signingKey:c,cache:f={}}){try{e_("fs",t),e_("gitdir",i),e_("oid",n);let r=new ex(t),s=await eD({fs:r,gitdir:i,author:o});if(!s)throw new t0("author");let d=await eM({fs:r,gitdir:i,author:s,committer:l});if(!d)throw new t0("committer");return await iG({fs:r,cache:f,onSign:e,gitdir:i,ref:a,oid:n,author:s,committer:d,signingKey:c})}catch(t){throw t.caller="git.removeNote",t}}async function iL({fs:t,gitdir:e,oldref:r,ref:i,checkout:a=!1}){if(i!==d.clean(i))throw new tY(i,d.clean(i));if(r!==d.clean(r))throw new tY(r,d.clean(r));let n=`refs/heads/${r}`,s=`refs/heads/${i}`;if(await tg.exists({fs:t,gitdir:e,ref:s}))throw new tz("branch",i,!1);let o=await tg.resolve({fs:t,gitdir:e,ref:n,depth:1});await tg.writeRef({fs:t,gitdir:e,ref:s,value:o}),await tg.deleteRef({fs:t,gitdir:e,ref:n});let l=await e5({fs:t,gitdir:e,fullname:!0})===n;(a||l)&&await tg.writeSymbolicRef({fs:t,gitdir:e,ref:"HEAD",value:s})}async function iV({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i,oldref:a,checkout:n=!1}){try{return e_("fs",t),e_("gitdir",r),e_("ref",i),e_("oldref",a),await iL({fs:new ex(t),gitdir:r,ref:i,oldref:a,checkout:n})}catch(t){throw t.caller="git.renameBranch",t}}async function iK({gitdir:t,type:e,object:r}){return k(t_.wrap({type:e,object:r}))}async function iZ({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),filepath:i,ref:a,cache:n={}}){try{let o,l;e_("fs",t),e_("gitdir",r),e_("filepath",i);let c=new ex(t);try{o=await tg.resolve({fs:c,gitdir:r,ref:a||"HEAD"})}catch(t){if(a)throw t}if(o)try{o=await eF({fs:c,cache:n,gitdir:r,oid:o,filepath:i})}catch(t){o=null}let f={ctime:new Date(0),mtime:new Date(0),dev:0,ino:0,mode:0,uid:0,gid:0,size:0},d=e&&await c.read((0,s.join)(e,i));d&&(l=await iK({gitdir:r,type:"blob",object:d}),o===l&&(f=await c.lstat((0,s.join)(e,i)))),await N.acquire({fs:c,gitdir:r,cache:n},async function(t){t.delete({filepath:i}),o&&t.insert({filepath:i,stats:f,oid:o})})}catch(t){throw t.caller="git.reset",t}}async function iY({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i,depth:a}){try{return e_("fs",t),e_("gitdir",r),e_("ref",i),await tg.resolve({fs:new ex(t),gitdir:r,ref:i,depth:a})}catch(t){throw t.caller="git.resolveRef",t}}async function iJ({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),path:i,value:a,append:n=!1}){try{e_("fs",t),e_("gitdir",r),e_("path",i);let e=new ex(t),s=await th.get({fs:e,gitdir:r});n?await s.append(i,a):await s.set(i,a),await th.save({fs:e,gitdir:r,config:s})}catch(t){throw t.caller="git.setConfig",t}}async function iX({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),filepath:i,cache:a={}}){try{e_("fs",t),e_("gitdir",r),e_("filepath",i);let n=new ex(t);if(await ek.isIgnored({fs:n,gitdir:r,dir:e,filepath:i}))return"ignored";let o=await i0({fs:n,cache:a,gitdir:r}),l=await iQ({fs:n,cache:a,gitdir:r,tree:o,path:i}),c=await N.acquire({fs:n,gitdir:r,cache:a},async function(t){for(let e of t)if(e.path===i)return e;return null}),f=await n.lstat((0,s.join)(e,i)),d=null!==l,u=null!==c,h=null!==f,w=async()=>{if(u&&!O(c,f))return c.oid;{let t=await n.read((0,s.join)(e,i)),o=await iK({gitdir:r,type:"blob",object:t});return u&&c.oid===o&&-1!==f.size&&N.acquire({fs:n,gitdir:r,cache:a},async function(t){t.insert({filepath:i,stats:f,oid:o})}),o}};if(!d&&!h&&!u)return"absent";if(!d&&!h&&u)return"*absent";if(!d&&h&&!u)return"*added";if(!d&&h&&u)return await w()===c.oid?"added":"*added";if(d&&!h&&!u)return"deleted";if(d&&!h&&u)return c.oid,"*deleted";if(d&&h&&!u)return await w()===l?"*undeleted":"*undeletemodified";if(d&&h&&u){let t=await w();if(t===l)return t===c.oid?"unmodified":"*unmodified";return t===c.oid?"modified":"*modified"}}catch(t){throw t.caller="git.status",t}}async function iQ({fs:t,cache:e,gitdir:r,tree:i,path:a}){"string"==typeof a&&(a=a.split("/"));let n=a.shift();for(let s of i)if(s.path===n){if(0===a.length)return s.oid;let{type:i,object:n}=await tH({fs:t,cache:e,gitdir:r,oid:s.oid});if("tree"===i)return iQ({fs:t,cache:e,gitdir:r,tree:tx.from(n),path:a});if("blob"===i)throw new F(s.oid,i,"blob",a.join("/"))}return null}async function i0({fs:t,cache:e,gitdir:r}){let i;try{i=await tg.resolve({fs:t,gitdir:r,ref:"HEAD"})}catch(t){if(t instanceof W)return[]}let{tree:a}=await eq({fs:t,cache:e,gitdir:r,oid:i});return a}async function i1({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i="HEAD",filepaths:a=["."],filter:n,cache:o={},ignored:l=!1}){try{e_("fs",t),e_("gitdir",r),e_("ref",i);let s=new ex(t);return await ep({fs:s,cache:o,dir:e,gitdir:r,trees:[ed({ref:i}),eh(),z()],map:async function(t,[r,i,o]){let c;if(!r&&!o&&i&&!l&&await ek.isIgnored({fs:s,dir:e,filepath:t})||!a.some(e=>e1(t,e)))return null;if(n&&!n(t))return;let[f,d,u]=await Promise.all([r&&r.type(),i&&i.type(),o&&o.type()]),h=[f,d,u].includes("blob");if(("tree"===f||"special"===f)&&!h)return;if("commit"===f)return null;if(("tree"===d||"special"===d)&&!h)return;if("commit"===u)return null;if(("tree"===u||"special"===u)&&!h)return;let w="blob"===f?await r.oid():void 0,m="blob"===u?await o.oid():void 0;"blob"!==f&&"blob"===d&&"blob"!==u?c="42":"blob"===d&&(c=await i.oid());let p=[void 0,w,c,m],g=p.map(t=>p.indexOf(t));return g.shift(),[t,...g]}})}catch(t){throw t.caller="git.statusMatrix",t}}async function i2({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i,object:a,force:n=!1}){try{e_("fs",t),e_("gitdir",r),e_("ref",i);let e=new ex(t);if(void 0===i)throw new t1("ref");i=i.startsWith("refs/tags/")?i:`refs/tags/${i}`;let s=await tg.resolve({fs:e,gitdir:r,ref:a||"HEAD"});if(!n&&await tg.exists({fs:e,gitdir:r,ref:i}))throw new tz("tag",i);await tg.writeRef({fs:e,gitdir:r,ref:i,value:s})}catch(t){throw t.caller="git.tag",t}}async function i8({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),cache:i={},filepath:a,oid:n,mode:o,add:l,remove:c,force:f}){try{let d;e_("fs",t),e_("gitdir",r),e_("filepath",a);let u=new ex(t);if(c)return await N.acquire({fs:u,gitdir:r,cache:i},async function(t){let r;if(!f&&(r=await u.lstat((0,s.join)(e,a)))){if(r.isDirectory())throw new tZ("directory");return}t.has({filepath:a})&&t.delete({filepath:a})});if(!n){if(!(d=await u.lstat((0,s.join)(e,a))))throw new W(`file at "${a}" on disk and "remove" not set`);if(d.isDirectory())throw new tZ("directory")}return await N.acquire({fs:u,gitdir:r,cache:i},async function(t){if(!l&&!t.has({filepath:a}))throw new W(`file at "${a}" in index and "add" not set`);let i={ctime:new Date(0),mtime:new Date(0),dev:0,ino:0,mode:o,uid:0,gid:0,size:0};if(!n){let t=(i=d).isSymbolicLink()?await u.readlink((0,s.join)(e,a)):await u.read((0,s.join)(e,a));n=await eP({fs:u,gitdir:r,type:"blob",format:"content",object:t})}return t.insert({filepath:a,oid:n,stats:i}),n})}catch(t){throw t.caller="git.updateIndex",t}}function i4(){try{return ry.version}catch(t){throw t.caller="git.version",t}}async function i3({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),trees:i,map:a,reduce:n,iterate:o,cache:l={}}){try{return e_("fs",t),e_("gitdir",r),e_("trees",i),await ep({fs:new ex(t),cache:l,dir:e,gitdir:r,trees:i,map:a,reduce:n,iterate:o})}catch(t){throw t.caller="git.walk",t}}async function i6({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),blob:i}){try{return e_("fs",t),e_("gitdir",r),e_("blob",i),await eP({fs:new ex(t),gitdir:r,type:"blob",object:i,format:"content"})}catch(t){throw t.caller="git.writeBlob",t}}async function i5({fs:t,gitdir:e,commit:r}){let i=el.from(r).toObject();return await eP({fs:t,gitdir:e,type:"commit",object:i,format:"content"})}async function i9({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),commit:i}){try{return e_("fs",t),e_("gitdir",r),e_("commit",i),await i5({fs:new ex(t),gitdir:r,commit:i})}catch(t){throw t.caller="git.writeCommit",t}}async function i7({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),type:i,object:a,format:n="parsed",oid:o,encoding:l}){try{let e=new ex(t);if("parsed"===n){switch(i){case"commit":a=el.from(a).toObject();break;case"tree":a=tx.from(a).toObject();break;case"blob":a=h.from(a,l);break;case"tag":a=es.from(a).toObject();break;default:throw new F(o||"",i,"blob|commit|tag|tree")}n="content"}return o=await eP({fs:e,gitdir:r,type:i,object:a,oid:o,format:n})}catch(t){throw t.caller="git.writeObject",t}}async function at({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),ref:i,value:a,force:n=!1,symbolic:o=!1}){try{e_("fs",t),e_("gitdir",r),e_("ref",i),e_("value",a);let e=new ex(t);if(i!==d.clean(i))throw new tY(i,d.clean(i));if(!n&&await tg.exists({fs:e,gitdir:r,ref:i}))throw new tz("ref",i);o?await tg.writeSymbolicRef({fs:e,gitdir:r,ref:i,value:a}):(a=await tg.resolve({fs:e,gitdir:r,ref:a}),await tg.writeRef({fs:e,gitdir:r,ref:i,value:a}))}catch(t){throw t.caller="git.writeRef",t}}async function ae({fs:t,gitdir:e,tag:r}){let i=es.from(r).toObject();return await eP({fs:t,gitdir:e,type:"tag",object:i,format:"content"})}async function ar({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),tag:i}){try{return e_("fs",t),e_("gitdir",r),e_("tag",i),await ae({fs:new ex(t),gitdir:r,tag:i})}catch(t){throw t.caller="git.writeTag",t}}async function ai({fs:t,dir:e,gitdir:r=(0,s.join)(e,".git"),tree:i}){try{return e_("fs",t),e_("gitdir",r),e_("tree",i),await eL({fs:new ex(t),gitdir:r,tree:i})}catch(t){throw t.caller="git.writeTree",t}}let aa={Errors:er,STAGE:z,TREE:ed,WORKDIR:eh,add:eC,abortMerge:eE,addNote:eK,addRemote:eY,annotatedTag:eX,branch:e0,checkout:e4,clone:rk,commit:rS,getConfig:rQ,getConfigAll:r1,setConfig:iJ,currentBranch:rR,deleteBranch:rO,deleteRef:rP,deleteRemote:rC,deleteTag:rN,expandOid:rT,expandRef:rH,fastForward:rK,fetch:rZ,findMergeBase:rY,findRoot:rX,getRemoteInfo:r2,getRemoteInfo2:r4,hashBlob:r6,indexPack:r9,init:r7,isDescendent:ie,isIgnored:ir,listBranches:ii,listFiles:io,listNotes:ic,listRemotes:iu,listServerRefs:im,listTags:ip,log:i$,merge:iv,packObjects:iE,pull:ik,push:iA,readBlob:iN,readCommit:iB,readNote:iM,readObject:iT,readTag:iz,readTree:iW,remove:iF,removeNote:iq,renameBranch:iV,resetIndex:iZ,updateIndex:i8,resolveRef:iY,status:iX,statusMatrix:i1,tag:i2,version:i4,walk:i3,writeBlob:i6,writeCommit:i9,writeObject:i7,writeRef:at,writeTag:ar,writeTree:ai}}}]);